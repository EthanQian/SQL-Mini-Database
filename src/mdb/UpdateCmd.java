// Automatically generated code.  Edit at your own risk!
// Generated by bali2jak v2002.09.03.

package mdb;
import static mdb.Main.catalog;
import static mdb.Main.isOpen;
import static mdb.Main.store;
import static mdb.Main.tableIndex;
import static mdb.Main.txn;
import Jakarta.util.*;

import java.io.*;
import java.util.*;

import com.sleepycat.je.CursorConfig;
import com.sleepycat.je.LockMode;
import com.sleepycat.persist.EntityCursor;
import com.sleepycat.persist.PrimaryIndex;
import com.sleepycat.persist.SecondaryIndex;

public class UpdateCmd extends Update {

    final public static int ARG_LENGTH = 3 ;
    final public static int TOK_LENGTH = 4 ;
    private TupleDA da;
    private IndexTupleDA ida;
    
    public void execute () {
    	if(isOpen==1){
    		execute2();
    	}
    	else{
    		System.out.println("Please open a database first!");
    	}
    }

    public void execute2 () {
    	//super.execute();
    	long starttime = System.currentTimeMillis();
    	String tableName = getRel_name ().tok[0].getTokenName();
    	
    	ArrayList<Tuple> tupleGroups = new ArrayList<Tuple>();
    	
    	int flag=1;
    	
       
    	if(!catalog.TableName.contains(tableName)){
    		System.out.println("tagert table doesn't exist!");
    		return;
    	}
    	
    	Boolean hasIndex = false;
    	int hasIndexed = 0;
    	
    	for(int i=0; i<catalog.isIndexed.get(tableName).size();++i){
    		if(catalog.isIndexed.get(tableName).get(i).equals(true)){
    			hasIndex = true;
    			break;
    		}
    	}
    	
    	AstNode tmp = null;
    	if(hasIndex.equals(true)){
    		if(getOne_rel_pred ()!=null){
    			tmp = getOne_rel_pred ().arg[0];
    		}
    	
    		while (tmp!=null){
    			flag = 1;
    			String cmpPred = tmp.arg[0].arg[0].tok[0].getTokenName();
		    	String cmp = tmp.arg[0].arg[1].tok[0].getTokenName();
		    	String cmpVal = tmp.arg[0].arg[2].tok[0].getTokenName();
		    	
		    	int cmpFlag = 1;
				int cmpVal2 = 0;
				
				String s = tableName;
				int index = catalog.ColInfo.get(tableName).indexOf(cmpPred);
				
				if(index == -1){
					System.out.println("Wrong column name!");
					return;
				}
				
				if(!catalog.isIndexed.get(tableName).get(index).equals(true)){
					tmp = tmp.right;
					continue;
				}
				
				if(catalog.ColField.get(tableName).get(index).equals("int")){
			    	cmpVal2=Integer.parseInt(cmpVal);
		            cmpFlag = 0;
			    }
				
				if(cmp.equals("=")){
					hasIndexed = 1;
					
					PrimaryIndex<String,TempIndexEntity> pi = catalog.indexStore.get(tableName).get(index).getPrimaryIndex(String.class, TempIndexEntity.class);
                    CursorConfig config = new CursorConfig();
                    config.setReadUncommitted(true); 
                    
                    if(cmpFlag == 0 ){
               		 SecondaryIndex<Integer,String,TempIndexEntity> si = catalog.indexStore.get(tableName).get(index).getSecondaryIndex(pi, Integer.class, "intKey");
               		 EntityCursor<TempIndexEntity> sec_cursor = si.subIndex(cmpVal2).entities(catalog.indexTxn.get(tableName).get(index), config);
               		 try {
               			 for (TempIndexEntity sec : sec_cursor) {
               				 String pKey = sec.getPKey();
               				 da = new TupleDA(store.get(tableIndex.get(tableName)));
               			
               			     Tuple t = da.pIdx.get(catalog.indexTxn.get(tableName).get(index),pKey,LockMode.READ_UNCOMMITTED);
               			     tupleGroups.add(t); 
               			 }
               			 // Always make sure the cursor is closed when we are done with it.
               			 } finally {
               				 sec_cursor.close(); 
               			 }
               	 }
               	 if(cmpFlag == 1){
               		 SecondaryIndex<String,String,TempIndexEntity> si = catalog.indexStore.get(tableName).get(index).getSecondaryIndex(pi, String.class, "stringKey");
               		 EntityCursor<TempIndexEntity> sec_cursor = si.subIndex(cmpVal).entities(catalog.indexTxn.get(tableName).get(index), config);
               		 try {
               			 for (TempIndexEntity sec : sec_cursor) {
               				 String pKey = sec.getPKey();
               				 da = new TupleDA(store.get(tableIndex.get(tableName)));
               				 Tuple t = da.pIdx.get(catalog.indexTxn.get(tableName).get(index),pKey,LockMode.READ_UNCOMMITTED);
               	 			 tupleGroups.add(t);   
               			 }
               			 // Always make sure the cursor is closed when we are done with it.
               			 } finally {
               				 sec_cursor.close(); 
               			 }
               		 
               	 }
					
				}
				if(hasIndexed  == 1)
               	 break;
				
		    	
		    	
    		tmp = tmp.right;	
    		}
    		
    		if(getOne_rel_pred ()!=null){
    			tmp = getOne_rel_pred ().arg[0];
    		}
    		
    		if(hasIndexed!=1){
    			while(tmp!=null){
    				flag = 1;
        			String cmpPred = tmp.arg[0].arg[0].tok[0].getTokenName();
    		    	String cmp = tmp.arg[0].arg[1].tok[0].getTokenName();
    		    	String cmpVal = tmp.arg[0].arg[2].tok[0].getTokenName();
    		    	
    		    	int cmpFlag = 1;
    				int cmpVal2 = 0;
    				
    				String s = tableName;
    				int index = catalog.ColInfo.get(tableName).indexOf(cmpPred);
    				
    				if(!catalog.isIndexed.get(tableName).get(index).equals(true)){
    					tmp = tmp.right;
    					continue;
    				}
    				
    				if(catalog.ColField.get(tableName).get(index).equals("int")){
    			    	cmpVal2=Integer.parseInt(cmpVal);
    		            cmpFlag = 0;
    			    }
    				
    				PrimaryIndex<String,TempIndexEntity> pi = catalog.indexStore.get(tableName).get(index).getPrimaryIndex(String.class, TempIndexEntity.class);
                    CursorConfig config = new CursorConfig();
                    config.setReadUncommitted(true);  
    				
    				if(cmpFlag == 0){
                    	SecondaryIndex<Integer,String,TempIndexEntity> si = catalog.indexStore.get(tableName).get(index).getSecondaryIndex(pi, Integer.class, "intKey"); 
                    	
                        if(cmp.equals(">")){
                        	hasIndexed = 1;
                           
                            EntityCursor<TempIndexEntity> sec_cursor = si.entities(catalog.indexTxn.get(tableName).get(index), cmpVal2, false, Integer.MAX_VALUE, true,config);
                            try {
                       	 		for (TempIndexEntity sec : sec_cursor) {
                       	 			String pKey = sec.getPKey();
                       	 			da = new TupleDA(store.get(tableIndex.get(tableName)));
                       	 			Tuple t = da.pIdx.get(pKey);
                       	 			tupleGroups.add(t); 
                       	 		}
                			 // Always make sure the cursor is closed when we are done with it.
                			 }finally {
                				 sec_cursor.close(); 
                			 }
                           
                            
                        }
                        if(cmp.equals(">=")){
                        	hasIndexed = 1;
                       	 	EntityCursor<TempIndexEntity> sec_cursor = si.entities(catalog.indexTxn.get(tableName).get(index), cmpVal2, true, Integer.MAX_VALUE, true,config);
                           
                       	 	try {
                       	 		for (TempIndexEntity sec : sec_cursor) {
                       	 			String pKey = sec.getPKey();
                       	 			da = new TupleDA(store.get(tableIndex.get(tableName)));
                       	 			Tuple t = da.pIdx.get(pKey);
                       	 			tupleGroups.add(t); 
                       	 		}
                			 // Always make sure the cursor is closed when we are done with it.
                			 }finally {
                				 sec_cursor.close(); 
                			 }
                            
                        }
                        if(cmp.equals("<")){
                        	hasIndexed = 1;
                       	 	EntityCursor<TempIndexEntity> sec_cursor = si.entities(catalog.indexTxn.get(tableName).get(index), Integer.MIN_VALUE, false, cmpVal2, false,config);
 
                                                           
                       	 	try {
                       	 		for (TempIndexEntity sec : sec_cursor) {
                       	 			String pKey = sec.getPKey();
                       	 			da = new TupleDA(store.get(tableIndex.get(tableName)));
                       	 			Tuple t = da.pIdx.get(catalog.indexTxn.get(tableName).get(index),pKey,LockMode.READ_UNCOMMITTED);
                       	 			tupleGroups.add(t); 
                       	 		}
                			 // Always make sure the cursor is closed when we are done with it.
                			 }finally {
                				 sec_cursor.close(); 
                			 }
                            
                        }
                        if(cmp.equals("<=")){
                        	hasIndexed = 1;
                       	 EntityCursor<TempIndexEntity> sec_cursor = si.entities(catalog.indexTxn.get(tableName).get(index), Integer.MIN_VALUE, false, cmpVal2, true,config);
                       	 	try {
                       	 		for (TempIndexEntity sec : sec_cursor) {
                       	 			String pKey = sec.getPKey();
                       	 			da = new TupleDA(store.get(tableIndex.get(tableName)));
                       	 			Tuple t = da.pIdx.get(catalog.indexTxn.get(tableName).get(index),pKey,LockMode.READ_UNCOMMITTED);
                       	 			tupleGroups.add(t);  
                       	 		}
                			 // Always make sure the cursor is closed when we are done with it.
                			 }finally {
                				 sec_cursor.close(); 
                			 }
                            
                        }
                        
                    	
                    	
                    }else if(cmpFlag == 1){
                    	SecondaryIndex<String,String,TempIndexEntity> si = catalog.indexStore.get(tableName).get(index).getSecondaryIndex(pi, String.class, "stringKey"); 
                    	
                        if(cmp.equals(">")){
                        	hasIndexed = 1;
                            
                            EntityCursor<TempIndexEntity> sec_cursor = si.entities(catalog.indexTxn.get(tableName).get(index), cmpVal, false, null, false, config);
                            try {
                       	 		for (TempIndexEntity sec : sec_cursor) {
                       	 			String pKey = sec.getPKey();
                       	 			da = new TupleDA(store.get(tableIndex.get(tableName)));
                       	 			Tuple t = da.pIdx.get(catalog.indexTxn.get(tableName).get(index),pKey,LockMode.READ_UNCOMMITTED);
                       	 			tupleGroups.add(t);  
                       	 		}
                			 // Always make sure the cursor is closed when we are done with it.
                			 }finally {
                				 sec_cursor.close(); 
                			 }
                           
                            
                        }
                        
                        if(cmp.equals(">=")){
                        	hasIndexed = 1;
                            
                            
                            EntityCursor<TempIndexEntity> sec_cursor = si.entities(catalog.indexTxn.get(tableName).get(index), cmpVal, true, null, false, config);
                            try {
                       	 		for (TempIndexEntity sec : sec_cursor) {
                       	 			String pKey = sec.getPKey();
                       	 			da = new TupleDA(store.get(tableIndex.get(tableName)));
                       	 			Tuple t = da.pIdx.get(catalog.indexTxn.get(tableName).get(index),pKey,LockMode.READ_UNCOMMITTED);
                       	 			tupleGroups.add(t);  
                       	 		}
                			 // Always make sure the cursor is closed when we are done with it.
                			 }finally {
                				 sec_cursor.close(); 
                			 }
                           
                            
                        }
                        
                        if(cmp.equals("<")){
                        	hasIndexed = 1;
                            
                            
                            EntityCursor<TempIndexEntity> sec_cursor = si.entities(catalog.indexTxn.get(tableName).get(index), null, false, cmpVal, false, config);
                            try {
                       	 		for (TempIndexEntity sec : sec_cursor) {
                       	 			String pKey = sec.getPKey();
                       	 			da = new TupleDA(store.get(tableIndex.get(tableName)));
                       	 			Tuple t = da.pIdx.get(catalog.indexTxn.get(tableName).get(index),pKey,LockMode.READ_UNCOMMITTED);
                       	 			tupleGroups.add(t); 
                       	 		}
                			 // Always make sure the cursor is closed when we are done with it.
                			 }finally {
                				 sec_cursor.close(); 
                			 }
                           
                            
                        }
                        
                        if(cmp.equals("<=")){
                        	hasIndexed = 1;
                            
                            
                            EntityCursor<TempIndexEntity> sec_cursor = si.entities(catalog.indexTxn.get(tableName).get(index), null, false, cmpVal, true, config);
                            try {
                       	 		for (TempIndexEntity sec : sec_cursor) {
                       	 			String pKey = sec.getPKey();
                       	 			da = new TupleDA(store.get(tableIndex.get(tableName)));
                       	 			Tuple t = da.pIdx.get(catalog.indexTxn.get(tableName).get(index),pKey,LockMode.READ_UNCOMMITTED);
                       	 			tupleGroups.add(t);  
                       	 		}
                			 // Always make sure the cursor is closed when we are done with it.
                			 }finally {
                				 sec_cursor.close(); 
                			 }
                        }
    				
    				}
    				if(hasIndexed == 1){
                        break;
                    }
    				tmp = tmp.right;
    		}
    		}
    		
    		
    		
    	
    		if(getOne_rel_pred ()!=null){
    			tmp = getOne_rel_pred ().arg[0];
    		}
    		if(hasIndexed == 1){
    			while(tmp!=null){
    				String cmpPred = tmp.arg[0].arg[0].tok[0].getTokenName();
    		    	String cmp = tmp.arg[0].arg[1].tok[0].getTokenName();
    		    	String cmpVal = tmp.arg[0].arg[2].tok[0].getTokenName();
    		    	
    		    	int cmpFlag = 1;
    				int cmpVal2 = 0;
    				
    				String s = tableName;
    				int index = catalog.ColInfo.get(tableName).indexOf(cmpPred);
    				
    				if(catalog.ColField.get(tableName).get(index).equals("int")){
    			    	cmpVal2=Integer.parseInt(cmpVal);
    		            cmpFlag = 0;
    			    }
    				
    				List tmpRemove = new ArrayList();
                    
                    for(int i=0;i<tupleGroups.size();++i){
                    	if(cmp.equals("=")){
                        	if(!tupleGroups.get(i).getValue().get(index).equals(cmpVal))
                        		tmpRemove.add(tupleGroups.get(i).getValue().get(index));
                        }
                    	
                    	 if(cmp.equals(">")){
             	              if(cmpFlag == 0){
             	                  Integer t = Integer.parseInt(tupleGroups.get(i).getValue().get(index));
             	                  if(t.compareTo(cmpVal2)<=0){
             	                	 tmpRemove.add(tupleGroups.get(i).getValue().get(index));
             	                  };
             	              }
             	              else{
             	            	  if(tupleGroups.get(i).getValue().get(index).compareTo(cmpVal)<=0){
             	            		 tmpRemove.add(tupleGroups.get(i).getValue().get(index));
             	            	  }
             	              }
                    	 }
                    	 
                    	 if(cmp.equals(">=")){
            	              if(cmpFlag == 0){
            	                  Integer t = Integer.parseInt(tupleGroups.get(i).getValue().get(index));
            	                  if(t.compareTo(cmpVal2)<0){
            	                	 tmpRemove.add(tupleGroups.get(i).getValue().get(index));
            	                  };
            	              }
            	              else{
            	            	  if(tupleGroups.get(i).getValue().get(index).compareTo(cmpVal)<0){
            	            		 tmpRemove.add(tupleGroups.get(i).getValue().get(index));
            	            	  }
            	              }
                    	 }
                    	 
                    	 if(cmp.equals("<")){
            	              if(cmpFlag == 0){
            	                  Integer t = Integer.parseInt(tupleGroups.get(i).getValue().get(index));
            	                  if(t.compareTo(cmpVal2)>=0){
            	                	 tmpRemove.add(tupleGroups.get(i).getValue().get(index));
            	                  };
            	              }
            	              else{
            	            	  if(tupleGroups.get(i).getValue().get(index).compareTo(cmpVal)>=0){
            	            		 tmpRemove.add(tupleGroups.get(i).getValue().get(index));
            	            	  }
            	              }
                    	 }
                    	 
                    	 if(cmp.equals("<=")){
            	              if(cmpFlag == 0){
            	                  Integer t = Integer.parseInt(tupleGroups.get(i).getValue().get(index));
            	                  if(t.compareTo(cmpVal2)>0){
            	                	 tmpRemove.add(tupleGroups.get(i).getValue().get(index));
            	                  };
            	              }
            	              else{
            	            	  if(tupleGroups.get(i).getValue().get(index).compareTo(cmpVal)>0){
            	            		 tmpRemove.add(tupleGroups.get(i).getValue().get(index));
            	            	  }
            	              }
                    	 }
                    	 
                    	 if(cmp.equals("!")){
                         	if(tupleGroups.get(i).getValue().get(index).equals(cmpVal))
                         		tmpRemove.add(tupleGroups.get(i).getValue().get(index));
                         }	
                    }
                    tupleGroups.removeAll(tmpRemove);
                    tmp = tmp.right;
                    }
    				
    				
    				
    				
    				
    			}
    		
    		for(int i=0; i<tupleGroups.size();++i){
    			Tuple tt = tupleGroups.get(i);
    			ArrayList<String> tempVal = tt.getValue();
    			
    			AstNode tmp2 = getAssign_list ().arg[0];
		    	while(tmp2 != null){
		    		String pred = tmp2.arg[0].arg[0].tok[0].getTokenName();
		    		String val = tmp2.arg[0].arg[1].tok[0].getTokenName();
		    		int index2 = catalog.ColInfo.get(tableName).indexOf(pred);
    				tempVal.set(index2, val);
    				tmp2 = tmp2.right;
    				 
    				ida = new IndexTupleDA(catalog.indexStore.get(tableName).get(index2));
    			   	   
    				PrimaryIndex<String,TempIndexEntity> pi = catalog.indexStore.get(tableName).get(index2).getPrimaryIndex(String.class, TempIndexEntity.class);
                    CursorConfig config = new CursorConfig();
                    config.setReadUncommitted(true);  
    				
    				if(catalog.isIndexed.get(tableName).get(index2).equals(true)){
    					TempIndexEntity x = new TempIndexEntity();
    					x.setPKey(tt.getPKey());
    					if(catalog.ColField.get(tableName).get(index2).equals("int")){
    						x.setIntKey(Integer.parseInt(val));
    						SecondaryIndex<Integer,String,TempIndexEntity> si = catalog.indexStore.get(tableName).get(index2).getSecondaryIndex(pi, Integer.class, "intKey");
    						ida.pIdx.put(catalog.indexTxn.get(tableName).get(index2),x);
    					}
    					else{
    						x.setStringKey(val);
    						SecondaryIndex<String,String,TempIndexEntity> si = catalog.indexStore.get(tableName).get(index2).getSecondaryIndex(pi, String.class, "stringKey");
    						ida.pIdx.put(catalog.indexTxn.get(tableName).get(index2),x);
    					}
    					
    				}
		    		
		    	}
				
				
				tt.setValue(tempVal);
				da.pIdx.put(txn.get(tableIndex.get(tableName)),tt);
    			
    		}
    			
    		
    			
    		
    	}
    	if(hasIndex.equals(false)||hasIndexed == 0){
    		PrimaryIndex<String,Tuple> pi = store.get(tableIndex.get(tableName)).getPrimaryIndex(String.class, Tuple.class);
    		
    		CursorConfig config = new CursorConfig();
    		config.setReadUncommitted(true);  
    		
    		
    		EntityCursor<Tuple> pi_cursor = pi.entities(txn.get(tableIndex.get(tableName)),config);
    		
        	try {
        		for (Tuple seci : pi_cursor) {
        			tmp = getOne_rel_pred ().arg[0];
        			while(tmp!=null){
        				flag = 1;
        				
        				String cmpPred = tmp.arg[0].arg[0].tok[0].getTokenName();
        		    	String cmp = tmp.arg[0].arg[1].tok[0].getTokenName();
        		    	String cmpVal = tmp.arg[0].arg[2].tok[0].getTokenName();
        		    	
        		    	ArrayList<String> temp = seci.getValue();
        		    	
        		    	int cmpFlag = 1;
        				int cmpVal2 = 0;
        				
        				String s = tableName;
        				int index = catalog.ColInfo.get(tableName).indexOf(cmpPred);
        				
        				if(catalog.ColField.get(tableName).get(index).equals("int")){
        			    	cmpVal2=Integer.parseInt(cmpVal);
        		            cmpFlag = 0;
        			    }
        				
        				if(cmp.equals("=")){
        					if(!temp.get(index).equals(cmpVal))
        						flag = 0;
        						
        				}
        				
        				if(cmp.equals(">")){
        			    	if(cmpFlag == 0){
        			    		int tempint=Integer.parseInt(temp.get(index));
        			    		if(tempint <= cmpVal2){
        			    			flag = 0;
        			    		}
        			    	}
        			   
        			    	else{
        				    	if(temp.get(index).compareTo(cmpVal) <= 0){
        				    		flag = 0;
        				    	}
        			    	}
        				}
        				
        				if(cmp.equals("<")){
        			    	if(cmpFlag == 0){
        			    		int tempint=Integer.parseInt(temp.get(index));
        			    		if(tempint >= cmpVal2){
        			    			flag = 0;
        			    		}
        			    	}
        			    
        			    	else{
        				    	if(temp.get(index).compareTo(cmpVal) >= 0){
        				    		flag = 0;
        				    	}
        			    	}
        				}
        				
        				if(cmp.equals(">=")){
        			    	if(cmpFlag == 0){
        			    		int tempint=Integer.parseInt(temp.get(index));
        			    		if(tempint < cmpVal2){
        			    			flag = 0;
        			    		}
        			    	}
        			    
        			    	else{
        				    	if(temp.get(index).compareTo(cmpVal) < 0){
        				    		flag = 0;
        				    	}
        			    	}
        				}
        				
        				if(cmp.equals("<=")){
        			    	if(cmpFlag == 0){
        			    		int tempint=Integer.parseInt(temp.get(index));
        			    		if(tempint > cmpVal2){
        			    			flag = 0;
        			    		}
        			    	}
        			   
        			    	else{
        				    	if(temp.get(index).compareTo(cmpVal) > 0){
        				    		flag = 0;
        				    	}
        			    	}
        				}
        				
        				if(cmp.equals("!")){
        					if(temp.get(index).equals(cmpVal))
        						flag = 0;
        						
        				}
        				
        				if(flag == 1)
        					tmp = tmp.right;
        				else
        					break;
        			    	
        			    }
        			if(flag == 1){
        				da = new TupleDA(store.get(tableIndex.get(tableName)));
        		    	Tuple tt = da.pIdx.get(txn.get(tableIndex.get(tableName)),seci.getPKey(),LockMode.READ_UNCOMMITTED);
        				ArrayList<String> tempVal = tt.getValue();
        				
       
        		    	AstNode tmp2 = getAssign_list ().arg[0];
        		    	while(tmp2 != null){
        		    		String pred = tmp2.arg[0].arg[0].tok[0].getTokenName();
        		    		String val = tmp2.arg[0].arg[1].tok[0].getTokenName();
        		    		int index2 = catalog.ColInfo.get(tableName).indexOf(pred);
            				tempVal.set(index2, val);
            				tmp2 = tmp2.right;
            				
            				ida = new IndexTupleDA(catalog.indexStore.get(tableName).get(index2));
         			   	   
            				PrimaryIndex<String,TempIndexEntity> pi2 = catalog.indexStore.get(tableName).get(index2).getPrimaryIndex(String.class, TempIndexEntity.class);
                            CursorConfig config2 = new CursorConfig();
                            config.setReadUncommitted(true);  
            				
            				if(catalog.isIndexed.get(tableName).get(index2).equals(true)){
            					TempIndexEntity x = new TempIndexEntity();
            					x.setPKey(tt.getPKey());
            					if(catalog.ColField.get(tableName).get(index2).equals("int")){
            						x.setIntKey(Integer.parseInt(val));
            						SecondaryIndex<Integer,String,TempIndexEntity> si = catalog.indexStore.get(tableName).get(index2).getSecondaryIndex(pi2, Integer.class, "intKey");
            						ida.pIdx.put(catalog.indexTxn.get(tableName).get(index2),x);
            					}
            					else{
            						x.setStringKey(val);
            						SecondaryIndex<String,String,TempIndexEntity> si = catalog.indexStore.get(tableName).get(index2).getSecondaryIndex(pi2, String.class, "stringKey");
            						ida.pIdx.put(catalog.indexTxn.get(tableName).get(index2),x);
            					}
            					
            				}
        		    		
        		    	}
        				
        				
        				tt.setValue(tempVal);
        				da.pIdx.put(txn.get(tableIndex.get(tableName)),tt);
        			}
        				
        		}
        			
        			
        			
        			
        		} finally {
        			// Always close the cursor
        			pi_cursor.close();
        		}
    		
    	}
    	
    	long endtime = System.currentTimeMillis();
    	System.out.println("(time taken ="+ (endtime-starttime) +" ms)");
    	
    	
    	
    		
    		
    	
    		
  	
	    
		
    }

    public Assign_list getAssign_list () {
        
        return (Assign_list) arg [1] ;
    }

    public One_rel_pred getOne_rel_pred () {
        
        return (One_rel_pred) arg [2] ;
    }

    public Rel_name getRel_name () {
        
        return (Rel_name) arg [0] ;
    }

    public AstToken getSEMI () {
        
        return (AstToken) tok [3] ;
    }

    public AstToken getSET () {
        
        return (AstToken) tok [1] ;
    }

    public AstToken getUPDATE () {
        
        return (AstToken) tok [0] ;
    }

    public AstToken getWHERE () {
        
        return (AstToken) tok [2] ;
    }

    public boolean[] printorder () {
        
        return new boolean[] {true, false, true, false, true, false, true} ;
    }

    public UpdateCmd setParms
    (AstToken tok0, Rel_name arg0, AstToken tok1, Assign_list arg1, AstToken tok2, One_rel_pred arg2, AstToken tok3)
    {
        
        arg = new AstNode [ARG_LENGTH] ;
        tok = new AstTokenInterface [TOK_LENGTH] ;
        
        tok [0] = tok0 ;            /* UPDATE */
        arg [0] = arg0 ;            /* Rel_name */
        tok [1] = tok1 ;            /* SET */
        arg [1] = arg1 ;            /* Assign_list */
        tok [2] = tok2 ;            /* WHERE */
        arg [2] = arg2 ;            /* One_rel_pred */
        tok [3] = tok3 ;            /* SEMI */
        
        InitChildren () ;
        return (UpdateCmd) this ;
    }

}
