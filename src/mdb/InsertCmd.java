// Automatically generated code.  Edit at your own risk!
// Generated by bali2jak v2002.09.03.

package mdb;
import Jakarta.util.*;
import static mdb.Main.isOpen;
import static mdb.Main.tableCount;
import static mdb.Main.tableIndex;
import static mdb.Main.store;
import static mdb.Main.envmnt;
import static mdb.Main.txn;
import static mdb.Main.catalog;

import java.io.*;
import java.util.*;

public class InsertCmd extends Insert {

    final public static int ARG_LENGTH = 2 ;
    final public static int TOK_LENGTH = 6 ;
    private TupleDA da;
    private IndexTupleDA ida;
    
    public void execute () {
    	if(isOpen==1){
    		execute2();
    	}
    	else{
    		System.out.println("Please open a database first!");
    	}
    }

    public void execute2 () {
        
        //super.execute();
    	//super.execute();
    	String tableName = getRel_name ().tok[0].getTokenName();
    	AstNode tmp = getLiteral_list ().arg[0];
    	//System.out.println(tmp.className());
    	ArrayList<String> val = new ArrayList<String>();
    	while(tmp!=null){
    		String temp = tmp.arg[0].tok[0].getTokenName();
    		val.add(temp);
    		tmp = tmp.right;
    	}
    	
    	Tuple t = new Tuple();
    	t.setPKey();
    	t.setValue(val);
    	t.setTableName(tableName);
    	
    	if(tableIndex.get(tableName)==null){
    		System.out.println("target table doesn't exist!");
    		return;
    	}
    	
    	da = new TupleDA(store.get(tableIndex.get(tableName)));
    	da.pIdx.put(txn.get(tableIndex.get(tableName)), t);
    	
    	for(int i=0;i<catalog.isIndexed.get(tableName).size();++i){
    		if(catalog.isIndexed.get(tableName).get(i).equals(true)){
    			ida = new IndexTupleDA(catalog.indexStore.get(tableName).get(i));
    			TempIndexEntity tt = new TempIndexEntity();
    			if(catalog.ColField.get(tableName).get(i).equals("int")){
    				tt.setPKey(t.getPKey());
    				tt.setIntKey(Integer.parseInt(val.get(i)));
    				tt.setTableName(tableName);
    				
    			}else{
    				tt.setPKey(t.getPKey());
    				tt.setStringKey(val.get(i));
    				tt.setTableName(tableName);
    				
    			}
    			ida.pIdx.put(catalog.indexTxn.get(tableName).get(i),tt);
    				
    		}
    	}
    	
    	
    }

    public AstToken getINSERT () {
        
        return (AstToken) tok [0] ;
    }

    public AstToken getINTO () {
        
        return (AstToken) tok [1] ;
    }

    public AstToken getLP () {
        
        return (AstToken) tok [3] ;
    }

    public Literal_list getLiteral_list () {
        
        return (Literal_list) arg [1] ;
    }

    public AstToken getRP () {
        
        return (AstToken) tok [4] ;
    }

    public Rel_name getRel_name () {
        
        return (Rel_name) arg [0] ;
    }

    public AstToken getSEMI () {
        
        return (AstToken) tok [5] ;
    }

    public AstToken getVALUES () {
        
        return (AstToken) tok [2] ;
    }

    public boolean[] printorder () {
        
        return new boolean[] {true, true, false, true, true, false, true, true} ;
    }

    public InsertCmd setParms
    (AstToken tok0, AstToken tok1, Rel_name arg0, AstToken tok2, AstToken tok3, Literal_list arg1, AstToken tok4, AstToken tok5)
    {
        
        arg = new AstNode [ARG_LENGTH] ;
        tok = new AstTokenInterface [TOK_LENGTH] ;
        
        tok [0] = tok0 ;            /* INSERT */
        tok [1] = tok1 ;            /* INTO */
        arg [0] = arg0 ;            /* Rel_name */
        tok [2] = tok2 ;            /* VALUES */
        tok [3] = tok3 ;            /* LP */
        arg [1] = arg1 ;            /* Literal_list */
        tok [4] = tok4 ;            /* RP */
        tok [5] = tok5 ;            /* SEMI */
        
        InitChildren () ;
        return (InsertCmd) this ;
    }

}
