// Automatically generated code.  Edit at your own risk!
// Generated by bali2jak v2002.09.03.

package mdb;
import static mdb.Main.catalog;
import static mdb.Main.isOpen;
import static mdb.Main.store;
import static mdb.Main.tableCount;
import static mdb.Main.tableIndex;
import static mdb.Main.txn;
import Jakarta.util.*;

import java.io.*;
import java.util.*;

import com.sleepycat.je.CursorConfig;
import com.sleepycat.je.LockMode;
import com.sleepycat.persist.EntityCursor;
import com.sleepycat.persist.PrimaryIndex;
import com.sleepycat.persist.SecondaryIndex;

public class DeleteCmd extends Delete {

    final public static int ARG_LENGTH = 2 ;
    final public static int TOK_LENGTH = 3 ;
    private TupleDA da;
    private IndexTupleDA ida;
    
    public void execute () {
    	if(isOpen==1){
    		execute2();
    	}
    	else{
    		System.out.println("Please open a database first!");
    	}
    }

    public void execute2 () {
        
        //super.execute();
    	long starttime = System.currentTimeMillis();
        
        String tableName = getRel_name ().tok[0].getTokenName();
        
        ArrayList<Tuple> tupleGroups = new ArrayList<Tuple>();
    	
    	int flag=1;
    	
       
    	if(!catalog.TableName.contains(tableName)){
    		System.out.println("tagert table doesn't exist!");
    		return;
    	}
    	
    	Boolean hasIndex = false;
    	int hasIndexed = 0;
    	
    	
    	for(int i=0; i<catalog.isIndexed.get(tableName).size();++i){
    		if(catalog.isIndexed.get(tableName).get(i).equals(true)){
    			hasIndex = true;
    			break;
    		}
    	}
    	
    	AstNode tmp = getOne_rel_pred ().arg[0];
    	if(tmp==null){
    		System.out.println("miss where clause!");
    		return;
    	}
    	
    	if(hasIndex.equals(true)){
    		while(tmp!=null){
    			flag = 1;
    			String pred = tmp.arg[0].arg[0].tok[0].getTokenName();
		    	String cmp = tmp.arg[0].arg[1].tok[0].getTokenName();
		    	String val = tmp.arg[0].arg[2].tok[0].getTokenName();
		    	
		    	int cmpFlag = 1;
				int cmpVal = 0;
				
				String s = tableName;
				int index = catalog.ColInfo.get(tableName).indexOf(pred);
				
				if(catalog.ColField.get(tableName).get(index).equals("int")){
			    	cmpVal=Integer.parseInt(val);
		            cmpFlag = 0;
			    }
				
				if(index == -1){
					System.out.println("Wrong column name!");
					return;
				}
				
				if(!catalog.isIndexed.get(tableName).get(index).equals(true)){
					tmp = tmp.right;
					continue;
				}
				
				if(catalog.ColField.get(tableName).get(index).equals("int")){
			    	cmpVal=Integer.parseInt(val);
		            cmpFlag = 0;
			    }
				
				if(cmp.equals("=")){
					hasIndexed=1;
					
					PrimaryIndex<String,TempIndexEntity> pi = catalog.indexStore.get(tableName).get(index).getPrimaryIndex(String.class, TempIndexEntity.class);
                    CursorConfig config = new CursorConfig();
                    config.setReadUncommitted(true); 
                    
                    if(cmpFlag == 0 ){
                    	SecondaryIndex<Integer,String,TempIndexEntity> si = catalog.indexStore.get(tableName).get(index).getSecondaryIndex(pi, Integer.class, "intKey");
                  		 EntityCursor<TempIndexEntity> sec_cursor = si.subIndex(cmpVal).entities(catalog.indexTxn.get(tableName).get(index), config);
                  		 
                  		try {
                  			 for (TempIndexEntity sec : sec_cursor) {
                  				 String pKey = sec.getPKey();
                  				 da = new TupleDA(store.get(tableIndex.get(tableName)));
                  			
                  			     Tuple t = da.pIdx.get(catalog.indexTxn.get(tableName).get(index),pKey,LockMode.READ_UNCOMMITTED);
                  			     tupleGroups.add(t); 
                  			 }
                  			 // Always make sure the cursor is closed when we are done with it.
                  			 } finally {
                  				 sec_cursor.close(); 
                  			 }
                    }
                  	 if(cmpFlag == 1){
                   		 SecondaryIndex<String,String,TempIndexEntity> si = catalog.indexStore.get(tableName).get(index).getSecondaryIndex(pi, String.class, "stringKey");
                   		 EntityCursor<TempIndexEntity> sec_cursor = si.subIndex(val).entities(catalog.indexTxn.get(tableName).get(index), config);
                   		 try {
                   			 for (TempIndexEntity sec : sec_cursor) {
                   				 String pKey = sec.getPKey();
                   				 da = new TupleDA(store.get(tableIndex.get(tableName)));
                   				 Tuple t = da.pIdx.get(catalog.indexTxn.get(tableName).get(index),pKey,LockMode.READ_UNCOMMITTED);
                   	 			 tupleGroups.add(t);   
                   			 }
                   			 // Always make sure the cursor is closed when we are done with it.
                   			 } finally {
                   				 sec_cursor.close(); 
                   			 }
                   		 
                   	 }
                  }
				if(hasIndexed  == 1)
	               	 break;
				tmp = tmp.right;
			}
    		
    		tmp = getOne_rel_pred ().arg[0];
    		
    		if(hasIndexed!=1){
    			while(tmp!=null){
    				flag = 1;
        			String pred = tmp.arg[0].arg[0].tok[0].getTokenName();
    		    	String cmp = tmp.arg[0].arg[1].tok[0].getTokenName();
    		    	String val = tmp.arg[0].arg[2].tok[0].getTokenName();
    		    	
    		    	int cmpFlag = 1;
    				int cmpVal = 0;
    				
    				String s = tableName;
    				int index = catalog.ColInfo.get(tableName).indexOf(pred);
    				
    				if(catalog.ColField.get(tableName).get(index).equals("int")){
    			    	cmpVal=Integer.parseInt(val);
    		            cmpFlag = 0;
    			    }
    				
    				if(index == -1){
    					System.out.println("Wrong column name!");
    					return;
    				}
    				
    				if(!catalog.isIndexed.get(tableName).get(index).equals(true)){
    					tmp = tmp.right;
    					continue;
    				}
    				
    				if(catalog.ColField.get(tableName).get(index).equals("int")){
    			    	cmpVal=Integer.parseInt(val);
    		            cmpFlag = 0;
    			    }
    				
    				PrimaryIndex<String,TempIndexEntity> pi = catalog.indexStore.get(tableName).get(index).getPrimaryIndex(String.class, TempIndexEntity.class);
                    CursorConfig config = new CursorConfig();
                    config.setReadUncommitted(true);  
                    
                    if(cmpFlag == 0){
                    	SecondaryIndex<Integer,String,TempIndexEntity> si = catalog.indexStore.get(tableName).get(index).getSecondaryIndex(pi, Integer.class, "intKey"); 
                    	if(cmp.equals(">")){
                        	hasIndexed = 1;
                           
                            EntityCursor<TempIndexEntity> sec_cursor = si.entities(catalog.indexTxn.get(tableName).get(index), cmpVal, false, Integer.MAX_VALUE, true,config);
                            try {
                       	 		for (TempIndexEntity sec : sec_cursor) {
                       	 			String pKey = sec.getPKey();
                       	 			da = new TupleDA(store.get(tableIndex.get(tableName)));
                       	 			Tuple t = da.pIdx.get(pKey);
                       	 			tupleGroups.add(t); 
                       	 		}
                			 // Always make sure the cursor is closed when we are done with it.
                			 }finally {
                				 sec_cursor.close(); 
                			 }
                           
                            
                        }
                    	
                    	if(cmp.equals(">=")){
                        	hasIndexed = 1;
                       	 	EntityCursor<TempIndexEntity> sec_cursor = si.entities(catalog.indexTxn.get(tableName).get(index), cmpVal, true, Integer.MAX_VALUE, true,config);
                           
                       	 	try {
                       	 		for (TempIndexEntity sec : sec_cursor) {
                       	 			String pKey = sec.getPKey();
                       	 			da = new TupleDA(store.get(tableIndex.get(tableName)));
                       	 			Tuple t = da.pIdx.get(pKey);
                       	 			tupleGroups.add(t); 
                       	 		}
                			 // Always make sure the cursor is closed when we are done with it.
                			 }finally {
                				 sec_cursor.close(); 
                			 }
                            
                        }
                    	
                    	if(cmp.equals("<")){
                        	hasIndexed = 1;
                       	 	EntityCursor<TempIndexEntity> sec_cursor = si.entities(catalog.indexTxn.get(tableName).get(index), Integer.MIN_VALUE, false, cmpVal, false,config);
 
                                                           
                       	 	try {
                       	 		for (TempIndexEntity sec : sec_cursor) {
                       	 			String pKey = sec.getPKey();
                       	 			da = new TupleDA(store.get(tableIndex.get(tableName)));
                       	 			Tuple t = da.pIdx.get(catalog.indexTxn.get(tableName).get(index),pKey,LockMode.READ_UNCOMMITTED);
                       	 			tupleGroups.add(t); 
                       	 		}
                			 // Always make sure the cursor is closed when we are done with it.
                			 }finally {
                				 sec_cursor.close(); 
                			 }
                            
                        }
                    	
                    	if(cmp.equals("<=")){
                        	hasIndexed = 1;
                       	 EntityCursor<TempIndexEntity> sec_cursor = si.entities(catalog.indexTxn.get(tableName).get(index), Integer.MIN_VALUE, false, cmpVal, true,config);
                       	 	try {
                       	 		for (TempIndexEntity sec : sec_cursor) {
                       	 			String pKey = sec.getPKey();
                       	 			da = new TupleDA(store.get(tableIndex.get(tableName)));
                       	 			Tuple t = da.pIdx.get(catalog.indexTxn.get(tableName).get(index),pKey,LockMode.READ_UNCOMMITTED);
                       	 			tupleGroups.add(t);  
                       	 		}
                			 // Always make sure the cursor is closed when we are done with it.
                			 }finally {
                				 sec_cursor.close(); 
                			 }
                            
                        }
                        
                    }
                    
                    else if (cmpFlag == 1){
                    	SecondaryIndex<String,String,TempIndexEntity> si = catalog.indexStore.get(tableName).get(index).getSecondaryIndex(pi, String.class, "stringKey"); 
                    	
                    	if(cmp.equals(">")){
                        	hasIndexed = 1;
                            
                            EntityCursor<TempIndexEntity> sec_cursor = si.entities(catalog.indexTxn.get(tableName).get(index), val, false, null, false, config);
                            try {
                       	 		for (TempIndexEntity sec : sec_cursor) {
                       	 			String pKey = sec.getPKey();
                       	 			da = new TupleDA(store.get(tableIndex.get(tableName)));
                       	 			Tuple t = da.pIdx.get(catalog.indexTxn.get(tableName).get(index),pKey,LockMode.READ_UNCOMMITTED);
                       	 			tupleGroups.add(t);  
                       	 		}
                			 // Always make sure the cursor is closed when we are done with it.
                			 }finally {
                				 sec_cursor.close(); 
                			 }
                           
                            
                        }
                    	if(cmp.equals(">=")){
                        	hasIndexed = 1;
                            
                            
                            EntityCursor<TempIndexEntity> sec_cursor = si.entities(catalog.indexTxn.get(tableName).get(index), val, true, null, false, config);
                            try {
                       	 		for (TempIndexEntity sec : sec_cursor) {
                       	 			String pKey = sec.getPKey();
                       	 			da = new TupleDA(store.get(tableIndex.get(tableName)));
                       	 			Tuple t = da.pIdx.get(catalog.indexTxn.get(tableName).get(index),pKey,LockMode.READ_UNCOMMITTED);
                       	 			tupleGroups.add(t);  
                       	 		}
                			 // Always make sure the cursor is closed when we are done with it.
                			 }finally {
                				 sec_cursor.close(); 
                			 }
                           
                            
                        }
                    	
                    	if(cmp.equals("<")){
                        	hasIndexed = 1;
                            
                            
                            EntityCursor<TempIndexEntity> sec_cursor = si.entities(catalog.indexTxn.get(tableName).get(index), null, false, val, false, config);
                            try {
                       	 		for (TempIndexEntity sec : sec_cursor) {
                       	 			String pKey = sec.getPKey();
                       	 			da = new TupleDA(store.get(tableIndex.get(tableName)));
                       	 			Tuple t = da.pIdx.get(catalog.indexTxn.get(tableName).get(index),pKey,LockMode.READ_UNCOMMITTED);
                       	 			tupleGroups.add(t); 
                       	 		}
                			 // Always make sure the cursor is closed when we are done with it.
                			 }finally {
                				 sec_cursor.close(); 
                			 }
                           
                            
                        }
                    	
                    	if(cmp.equals("<=")){
                        	hasIndexed = 1;
                            
                            
                            EntityCursor<TempIndexEntity> sec_cursor = si.entities(catalog.indexTxn.get(tableName).get(index), null, false, val, true, config);
                            try {
                       	 		for (TempIndexEntity sec : sec_cursor) {
                       	 			String pKey = sec.getPKey();
                       	 			da = new TupleDA(store.get(tableIndex.get(tableName)));
                       	 			Tuple t = da.pIdx.get(catalog.indexTxn.get(tableName).get(index),pKey,LockMode.READ_UNCOMMITTED);
                       	 			tupleGroups.add(t);  
                       	 		}
                			 // Always make sure the cursor is closed when we are done with it.
                			 }finally {
                				 sec_cursor.close(); 
                			 }
                        }
                    	
                    	
                    	
                    	
                    }
                    
                    
                    if(hasIndexed == 1){
                    	break;
                    }
                    tmp = tmp.right;
                    
                    
                    
    				
    			}
    		}
    		
    		tmp = getOne_rel_pred ().arg[0];
    		
    		if(hasIndexed == 1){
    			while(tmp!=null){
    				flag = 1;
        			String pred = tmp.arg[0].arg[0].tok[0].getTokenName();
    		    	String cmp = tmp.arg[0].arg[1].tok[0].getTokenName();
    		    	String val = tmp.arg[0].arg[2].tok[0].getTokenName();
    		    	
    		    	int cmpFlag = 1;
    				int cmpVal = 0;
    				
    				String s = tableName;
    				int index = catalog.ColInfo.get(tableName).indexOf(pred);
    				
    				if(catalog.ColField.get(tableName).get(index).equals("int")){
    			    	cmpVal=Integer.parseInt(val);
    		            cmpFlag = 0;
    			    }
    				
    				List tmpRemove = new ArrayList();
    				
    				 for(int i=0;i<tupleGroups.size();++i){
                     	if(cmp.equals("=")){
                         	if(!tupleGroups.get(i).getValue().get(index).equals(val))
                         		tmpRemove.add(tupleGroups.get(i).getValue().get(index));
                         }
                     	
                     	 if(cmp.equals(">")){
              	              if(cmpFlag == 0){
              	                  Integer t = Integer.parseInt(tupleGroups.get(i).getValue().get(index));
              	                  if(t.compareTo(cmpVal)<=0){
              	                	 tmpRemove.add(tupleGroups.get(i).getValue().get(index));
              	                  };
              	              }
              	              else{
              	            	  if(tupleGroups.get(i).getValue().get(index).compareTo(val)<=0){
              	            		 tmpRemove.add(tupleGroups.get(i).getValue().get(index));
              	            	  }
              	              }
                     	 }
                     	 
                     	 if(cmp.equals(">=")){
             	              if(cmpFlag == 0){
             	                  Integer t = Integer.parseInt(tupleGroups.get(i).getValue().get(index));
             	                  if(t.compareTo(cmpVal)<0){
             	                	 tmpRemove.add(tupleGroups.get(i).getValue().get(index));
             	                  };
             	              }
             	              else{
             	            	  if(tupleGroups.get(i).getValue().get(index).compareTo(val)<0){
             	            		 tmpRemove.add(tupleGroups.get(i).getValue().get(index));
             	            	  }
             	              }
                     	 }
                     	 
                     	 if(cmp.equals("<")){
             	              if(cmpFlag == 0){
             	                  Integer t = Integer.parseInt(tupleGroups.get(i).getValue().get(index));
             	                  if(t.compareTo(cmpVal)>=0){
             	                	 tmpRemove.add(tupleGroups.get(i).getValue().get(index));
             	                  };
             	              }
             	              else{
             	            	  if(tupleGroups.get(i).getValue().get(index).compareTo(val)>=0){
             	            		 tmpRemove.add(tupleGroups.get(i).getValue().get(index));
             	            	  }
             	              }
                     	 }
                     	 
                     	 if(cmp.equals("<=")){
             	              if(cmpFlag == 0){
             	                  Integer t = Integer.parseInt(tupleGroups.get(i).getValue().get(index));
             	                  if(t.compareTo(cmpVal)>0){
             	                	 tmpRemove.add(tupleGroups.get(i).getValue().get(index));
             	                  };
             	              }
             	              else{
             	            	  if(tupleGroups.get(i).getValue().get(index).compareTo(val)>0){
             	            		 tmpRemove.add(tupleGroups.get(i).getValue().get(index));
             	            	  }
             	              }
                     	 }
                     	 
                     	 if(cmp.equals("!")){
                          	if(tupleGroups.get(i).getValue().get(index).equals(val))
                          		tmpRemove.add(tupleGroups.get(i).getValue().get(index));
                          }	
                     }
    				 
    				 tupleGroups.removeAll(tmpRemove);
                     tmp = tmp.right;
    				
    			}
    			
    		}
    		
    		
    		for(int k=0; k<tupleGroups.size();++k){
    			Tuple tt = tupleGroups.get(k);
    			
    			da = new TupleDA(store.get(tableIndex.get(tableName)));
		    	da.pIdx.delete(txn.get(tableIndex.get(tableName)),tt.getPKey());
		    	
		    	
		    	for(int i=0;i<catalog.isIndexed.get(tableName).size();++i){
		    		if(catalog.isIndexed.get(tableName).get(i).equals(true)){
		    			ida = new IndexTupleDA(catalog.indexStore.get(tableName).get(i));
		    			PrimaryIndex<String,TempIndexEntity> pi2 = catalog.indexStore.get(tableName).get(i).getPrimaryIndex(String.class, TempIndexEntity.class);
	                    CursorConfig config2 = new CursorConfig();
	                    config2.setReadUncommitted(true); 
	                    
	                    if(catalog.isIndexed.get(tableName).get(i).equals(true)){
	    					TempIndexEntity x = new TempIndexEntity();
	    					x.setPKey(tt.getPKey());
	    					String val = tt.getValue().get(i);
	    					if(catalog.ColField.get(tableName).get(i).equals("int")){
	    						x.setIntKey(Integer.parseInt(val));
	    						SecondaryIndex<Integer,String,TempIndexEntity> si = catalog.indexStore.get(tableName).get(i).getSecondaryIndex(pi2, Integer.class, "intKey");
	    						ida.pIdx.delete(catalog.indexTxn.get(tableName).get(i),x.getPKey());
	    					}
	    					else{
	    						x.setStringKey(val);
	    						SecondaryIndex<String,String,TempIndexEntity> si = catalog.indexStore.get(tableName).get(i).getSecondaryIndex(pi2, String.class, "stringKey");
	    						ida.pIdx.delete(catalog.indexTxn.get(tableName).get(i),x.getPKey());
	    					}
	    				}
		    			
		    		}
		    	}
    			
    			
    		}
    		
    		
    		
    		
    		
    		
    		
    		
    		
    	}
    	
    	if(hasIndex.equals(false)||hasIndexed == 0){

    	PrimaryIndex<String,Tuple> pi = store.get(tableIndex.get(tableName)).getPrimaryIndex(String.class, Tuple.class);
		
		CursorConfig config = new CursorConfig();
		config.setReadUncommitted(true);  
		
		
		EntityCursor<Tuple> pi_cursor = pi.entities(txn.get(tableIndex.get(tableName)),config);
    		
    	try {
    		for (Tuple seci : pi_cursor) {
    			tmp = getOne_rel_pred ().arg[0];
    			while(tmp!=null){
    				flag = 1;
    				
    				String pred = tmp.arg[0].arg[0].tok[0].getTokenName();
    		    	String cmp = tmp.arg[0].arg[1].tok[0].getTokenName();
    		    	String val = tmp.arg[0].arg[2].tok[0].getTokenName();
    		    	
    		    	ArrayList<String> temp = seci.getValue();
    		    	
    		    	int cmpFlag = 1;
    				int cmpVal = 0;
    				
    				String s = tableName;
    				int index = catalog.ColInfo.get(tableName).indexOf(pred);
    				
    				if(catalog.ColField.get(tableName).get(index).equals("int")){
    			    	cmpVal=Integer.parseInt(val);
    		            cmpFlag = 0;
    			    }
    				
    				if(cmp.equals("=")){
    					if(!temp.get(index).equals(val))
    						flag = 0;
    						
    				}
    				
    				if(cmp.equals(">")){
    			    	if(cmpFlag == 0){
    			    		int tempint=Integer.parseInt(temp.get(index));
    			    		if(tempint <= cmpVal){
    			    			flag = 0;
    			    		}
    			    	}
    			   
    			    	else{
    				    	if(temp.get(index).compareTo(val) <= 0){
    				    		flag = 0;
    				    	}
    			    	}
    				}
    				
    				if(cmp.equals("<")){
    			    	if(cmpFlag == 0){
    			    		int tempint=Integer.parseInt(temp.get(index));
    			    		if(tempint >= cmpVal){
    			    			flag = 0;
    			    		}
    			    	}
    			    
    			    	else{
    				    	if(temp.get(index).compareTo(val) >= 0){
    				    		flag = 0;
    				    	}
    			    	}
    				}
    				
    				if(cmp.equals(">=")){
    			    	if(cmpFlag == 0){
    			    		int tempint=Integer.parseInt(temp.get(index));
    			    		if(tempint < cmpVal){
    			    			flag = 0;
    			    		}
    			    	}
    			    
    			    	else{
    				    	if(temp.get(index).compareTo(val) < 0){
    				    		flag = 0;
    				    	}
    			    	}
    				}
    				
    				if(cmp.equals("<=")){
    			    	if(cmpFlag == 0){
    			    		int tempint=Integer.parseInt(temp.get(index));
    			    		if(tempint > cmpVal){
    			    			flag = 0;
    			    		}
    			    	}
    			   
    			    	else{
    				    	if(temp.get(index).compareTo(val) > 0){
    				    		flag = 0;
    				    	}
    			    	}
    				}
    				
    				if(cmp.equals("!")){
    					if(temp.get(index).equals(val))
    						flag = 0;
    						
    				}
    				
    				if(flag == 1)
    					tmp = tmp.right;
    				else
    					break;
    			    	
    			    }
    			if(flag == 1){
    				da = new TupleDA(store.get(tableIndex.get(tableName)));
    		    	da.pIdx.delete(txn.get(tableIndex.get(tableName)),seci.getPKey());
    		    	
    		    	
    		    	for(int i=0;i<catalog.isIndexed.get(tableName).size();++i){
    		    		if(catalog.isIndexed.get(tableName).get(i).equals(true)){
    		    			ida = new IndexTupleDA(catalog.indexStore.get(tableName).get(i));
    		    			PrimaryIndex<String,TempIndexEntity> pi2 = catalog.indexStore.get(tableName).get(i).getPrimaryIndex(String.class, TempIndexEntity.class);
    	                    CursorConfig config2 = new CursorConfig();
    	                    config2.setReadUncommitted(true); 
    	                    
    	                    if(catalog.isIndexed.get(tableName).get(i).equals(true)){
    	    					TempIndexEntity x = new TempIndexEntity();
    	    					x.setPKey(seci.getPKey());
    	    					String val = seci.getValue().get(i);
    	    					if(catalog.ColField.get(tableName).get(i).equals("int")){
    	    						x.setIntKey(Integer.parseInt(val));
    	    						SecondaryIndex<Integer,String,TempIndexEntity> si = catalog.indexStore.get(tableName).get(i).getSecondaryIndex(pi2, Integer.class, "intKey");
    	    						ida.pIdx.delete(catalog.indexTxn.get(tableName).get(i),x.getPKey());
    	    					}
    	    					else{
    	    						x.setStringKey(val);
    	    						SecondaryIndex<String,String,TempIndexEntity> si = catalog.indexStore.get(tableName).get(i).getSecondaryIndex(pi2, String.class, "stringKey");
    	    						ida.pIdx.delete(catalog.indexTxn.get(tableName).get(i),x.getPKey());
    	    					}
    	    				}
    		    			
    		    		}
    		    	}
    			}
    		    	
    		    	
    		    	
 			   	   
    				 
    				
    				
    				
    			}
    			
    			
    				
    		
    			
    			
    			
    			
    		} finally {
    			// Always close the cursor
    			pi_cursor.close();
    		}
    		
    		
    	
    	}
    	
    	long endtime = System.currentTimeMillis();
    	System.out.println("(time taken ="+ (endtime-starttime) +" ms)");
    	
		
    }

    public AstToken getDELETE () {
        
        return (AstToken) tok [0] ;
    }

    public One_rel_pred getOne_rel_pred () {
        
        return (One_rel_pred) arg [1] ;
    }

    public Rel_name getRel_name () {
        
        return (Rel_name) arg [0] ;
    }

    public AstToken getSEMI () {
        
        return (AstToken) tok [2] ;
    }

    public AstToken getWHERE () {
        
        return (AstToken) tok [1] ;
    }

    public boolean[] printorder () {
        
        return new boolean[] {true, false, true, false, true} ;
    }

    public DeleteCmd setParms
    (AstToken tok0, Rel_name arg0, AstToken tok1, One_rel_pred arg1, AstToken tok2)
    {
        
        arg = new AstNode [ARG_LENGTH] ;
        tok = new AstTokenInterface [TOK_LENGTH] ;
        
        tok [0] = tok0 ;            /* DELETE */
        arg [0] = arg0 ;            /* Rel_name */
        tok [1] = tok1 ;            /* WHERE */
        arg [1] = arg1 ;            /* One_rel_pred */
        tok [2] = tok2 ;            /* SEMI */
        
        InitChildren () ;
        return (DeleteCmd) this ;
    }

}
