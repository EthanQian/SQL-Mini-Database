// Automatically generated code.  Edit at your own risk!
// Generated by bali2jak v2002.09.03.

package mdb;
import Jakarta.util.*;

import java.io.*;
import java.util.*;

import com.sleepycat.je.CursorConfig;
import com.sleepycat.je.LockMode;
import com.sleepycat.persist.EntityCursor;
import com.sleepycat.persist.PrimaryIndex;
import com.sleepycat.persist.SecondaryIndex;

import org.apache.commons.collections.MultiHashMap;
import org.apache.commons.collections.MultiMap;







import static mdb.Main.catalog;
import static mdb.Main.isOpen;
import static mdb.Main.store;
import static mdb.Main.tableIndex;
import static mdb.Main.txn;

@SuppressWarnings("deprecation")
public class SelectCmd extends Select {

    final public static int ARG_LENGTH = 3 ;
    final public static int TOK_LENGTH = 3 ;
    private TupleDA da;
    private IndexTupleDA ida;
    
    public void execute () {
    	if(isOpen==1){
    		execute2();
    	}
    	else{
    		System.out.println("Please open a database first!");
    	}
    }

    public void execute2 () {
        //super.execute();
    	long starttime = System.currentTimeMillis();
        TempTuple tupleGroups = new TempTuple();
        TempTableCatalog tableGroups = new TempTableCatalog();
        
        HashMap <String, String> nameSearch = new HashMap <String, String> ();
        AstNode tmp = getRel_list ().arg[0];
        
        while(tmp!=null){
            String tableName = tmp.arg[0].tok[0].getTokenName();
            tableGroups.AddTable(tableName);
            tupleGroups.AddTable(tableName);
            tupleGroups.Initalize(tableName);
            
            if(!catalog.TableName.contains(tableName)){
            	System.out.println("table does't exist");
            	return;
            	
            }
            
            tableGroups.GetColField().put(tableName, new ArrayList<String>(catalog.ColField.get(tableName)));
            tableGroups.GetColInfo().put(tableName, new ArrayList<String>(catalog.ColInfo.get(tableName)));
            
            //ArrayList<ArrayList<String>> tmpTuple = new ArrayList<ArrayList<String>>(tuple.GetValue(tableName));
            //tupleGroups.GetValue(tableName).put(tableName, tmpTuple);
            tmp = tmp.right;
            
        }

        AstNode tmp2 = null;
        if(getWherePred()!=null){
             tmp2 = getWherePred().arg[0].arg[0];
        }

        String indexCol = new String();
        
        
        //handle single relation
        for(int i = 0;i<tableGroups.GetTableList().size();++i){
            String tableName = tableGroups.GetTableList().get(i);
            
            int hasIndexed = 0;
            
            Boolean hasIndex = false;
            Boolean isSameTable = true;
            for(int j = 0; j<catalog.isIndexed.get(tableName).size(); ++j){
                if(catalog.isIndexed.get(tableName).get(j).equals(true)){
                    hasIndex = true;
                    break;
                }
            
            }

            int flag = 1;
            
            if(getWherePred()!=null){
                tmp2 = getWherePred().arg[0].arg[0];
            }

           
            
            if(hasIndex.equals(true)){
            	//first pass, for columns which are indexed and cmp relation is "="
            	
            	
            	while(tmp2 != null){
            		if(tmp2.arg[0].className().equals("SimpleClause")){
            			 String cmp = tmp2.arg[0].arg[1].tok[0].getTokenName();
                         String val = tmp2.arg[0].arg[2].tok[0].getTokenName();
                         String pred = new String();
                         String s = new String(); //table name
                         if(tmp2.arg[0].arg[0].className().equals("FieldName")){
                             pred = tmp2.arg[0].arg[0].tok[0].getTokenName();
                             for( String t : tableGroups.GetTableList()){
                                 if(tableGroups.GetColInfo().get(t).contains(pred))
                                 s = t;
                              }
                         }
                         if(tmp2.arg[0].arg[0].className().equals("RelDotField")){
                             pred = tmp2.arg[0].arg[0].arg[1].tok[0].getTokenName();
                             s = tmp2.arg[0].arg[0].arg[0].tok[0].getTokenName();
                         }
                      
                         if(!s.equals(tableName)){
                             isSameTable = false;
                             tmp2 = tmp2.right;
                             continue;
                         }
                         
                         int cmpFlag = 1;
                         int cmpVal = 0;
                         
                         int index = catalog.ColInfo.get(tableName).indexOf(pred);
                         
                         if(catalog.isIndexed.get(s).get(index).equals(false)){
                        	 tmp2 = tmp2.right;
                        	 continue;
                         }
                        	 
                         if(cmp.equals("=")){
                        	 hasIndexed = 1;
                        	 indexCol = tableName + "."+ pred;
                        	 if(catalog.ColField.get(tableName).get(index).equals("int")){
                                 cmpVal=Integer.parseInt(val);
                                 cmpFlag = 0;
                             }
                        	 
                        	 PrimaryIndex<String,TempIndexEntity> pi = catalog.indexStore.get(tableName).get(index).getPrimaryIndex(String.class, TempIndexEntity.class);
                             CursorConfig config = new CursorConfig();
                             config.setReadUncommitted(true); 
                             
                        	 if(cmpFlag == 0 ){
                        		 SecondaryIndex<Integer,String,TempIndexEntity> si = catalog.indexStore.get(tableName).get(index).getSecondaryIndex(pi, Integer.class, "intKey");
                        		 EntityCursor<TempIndexEntity> sec_cursor = si.subIndex(cmpVal).entities(catalog.indexTxn.get(tableName).get(index), config);
                        		 try {
                        			 for (TempIndexEntity sec : sec_cursor) {
                        				 String pKey = sec.getPKey();
                        				 da = new TupleDA(store.get(tableIndex.get(tableName)));
                        				 ArrayList<String> t = da.pIdx.get(catalog.indexTxn.get(tableName).get(index),pKey,LockMode.READ_UNCOMMITTED).getValue();
                        			     tupleGroups.AddValue(tableName, t); 
                        			 }
                        			 // Always make sure the cursor is closed when we are done with it.
                        			 } finally {
                        				 sec_cursor.close(); 
                        			 }
                        	 }
                        	 if(cmpFlag == 1){
                        		 SecondaryIndex<String,String,TempIndexEntity> si = catalog.indexStore.get(tableName).get(index).getSecondaryIndex(pi, String.class, "stringKey");
                        		 EntityCursor<TempIndexEntity> sec_cursor = si.subIndex(val).entities(catalog.indexTxn.get(tableName).get(index), config);
                        		 try {
                        			 for (TempIndexEntity sec : sec_cursor) {
                        				 String pKey = sec.getPKey();
                        				 da = new TupleDA(store.get(tableIndex.get(tableName)));
                        				 ArrayList<String> t = da.pIdx.get(catalog.indexTxn.get(tableName).get(index),pKey,LockMode.READ_UNCOMMITTED).getValue();
                        			     tupleGroups.AddValue(tableName, t); 
                        			 }
                        			 // Always make sure the cursor is closed when we are done with it.
                        			 } finally {
                        				 sec_cursor.close(); 
                        			 }
                        		 
                        	 }
                        	 
                         }
                         if(hasIndexed  == 1)
                        	 break;
            		}
            		tmp2 = tmp2.right;
            		
            	}
            	
            	if(getWherePred()!=null){
                    tmp2 = getWherePred().arg[0].arg[0];
               }

            	
            	if(hasIndexed != 1){
            		while(tmp2 != null){
            			if(tmp2.arg[0].className().equals("SimpleClause")){
            				String cmp = tmp2.arg[0].arg[1].tok[0].getTokenName();
                            String val = tmp2.arg[0].arg[2].tok[0].getTokenName();
                            String pred = new String();
                            String s = new String(); //table name
                            if(tmp2.arg[0].arg[0].className().equals("FieldName")){
                                pred = tmp2.arg[0].arg[0].tok[0].getTokenName();
                                for( String t : tableGroups.GetTableList()){
                                    if(tableGroups.GetColInfo().get(t).contains(pred))
                                    s = t;
                                 }
                            }
                            if(tmp2.arg[0].arg[0].className().equals("RelDotField")){
                                pred = tmp2.arg[0].arg[0].arg[1].tok[0].getTokenName();
                                s = tmp2.arg[0].arg[0].arg[0].tok[0].getTokenName();
                            }
                         
                            if(!s.equals(tableName)){
                                isSameTable = false;
                                tmp2 = tmp2.right;
                                continue;
                            }
                            
                            int cmpFlag = 1;
                            int cmpVal = 0;
                            
                            int index = catalog.ColInfo.get(tableName).indexOf(pred);
                            
                            if(catalog.isIndexed.get(s).get(index).equals(false)){
                            	tmp2 = tmp2.right;
                                continue;
                            }
                            
                            if(catalog.ColField.get(tableName).get(index).equals("int")){
                                cmpVal=Integer.parseInt(val);
                                cmpFlag = 0;
                            }
                            
                            PrimaryIndex<String,TempIndexEntity> pi = catalog.indexStore.get(tableName).get(index).getPrimaryIndex(String.class, TempIndexEntity.class);
                            CursorConfig config = new CursorConfig();
                            config.setReadUncommitted(true);  
                            
                            
                            //for operation ">" "<" ">=" "<=", only support Integer
                            if(cmpFlag == 0){
                            	SecondaryIndex<Integer,String,TempIndexEntity> si = catalog.indexStore.get(tableName).get(index).getSecondaryIndex(pi, Integer.class, "intKey"); 
                            	
                                if(cmp.equals(">")){
                                	hasIndexed = 1;
                               	 	indexCol = tableName + "."+ pred;
                                    
                                    
                                    EntityCursor<TempIndexEntity> sec_cursor = si.entities(catalog.indexTxn.get(tableName).get(index), cmpVal, false, Integer.MAX_VALUE, true,config);
                                    try {
                               	 		for (TempIndexEntity sec : sec_cursor) {
                               	 			String pKey = sec.getPKey();
                               	 			da = new TupleDA(store.get(tableIndex.get(tableName)));
                               	 			ArrayList<String> t = da.pIdx.get(catalog.indexTxn.get(tableName).get(index),pKey,LockMode.READ_UNCOMMITTED).getValue();
                               	 			tupleGroups.AddValue(tableName, t); 
                               	 		}
                        			 // Always make sure the cursor is closed when we are done with it.
                        			 }finally {
                        				 sec_cursor.close(); 
                        			 }
                                   
                                    
                                }
                                if(cmp.equals(">=")){
                                	hasIndexed = 1;
                               	 	indexCol = tableName + "."+ pred;
                               	 	EntityCursor<TempIndexEntity> sec_cursor = si.entities(catalog.indexTxn.get(tableName).get(index), cmpVal, true, Integer.MAX_VALUE, true,config);
                                   
                               	 	try {
                               	 		for (TempIndexEntity sec : sec_cursor) {
                               	 			String pKey = sec.getPKey();
                               	 			da = new TupleDA(store.get(tableIndex.get(tableName)));
                               	 			ArrayList<String> t = da.pIdx.get(catalog.indexTxn.get(tableName).get(index),pKey,LockMode.READ_UNCOMMITTED).getValue();
                               	 			tupleGroups.AddValue(tableName, t); 
                               	 		}
                        			 // Always make sure the cursor is closed when we are done with it.
                        			 }finally {
                        				 sec_cursor.close(); 
                        			 }
                                    
                                }
                                if(cmp.equals("<")){
                                	hasIndexed = 1;
                               	 	indexCol = tableName + "."+ pred;
                               	 	EntityCursor<TempIndexEntity> sec_cursor = si.entities(catalog.indexTxn.get(tableName).get(index), Integer.MIN_VALUE, false, cmpVal, false,config);
         
                                                                   
                               	 	try {
                               	 		for (TempIndexEntity sec : sec_cursor) {
                               	 			String pKey = sec.getPKey();
                               	 			da = new TupleDA(store.get(tableIndex.get(tableName)));
                               	 			ArrayList<String> t = da.pIdx.get(catalog.indexTxn.get(tableName).get(index),pKey,LockMode.READ_UNCOMMITTED).getValue();
                               	 			tupleGroups.AddValue(tableName, t); 
                               	 		}
                        			 // Always make sure the cursor is closed when we are done with it.
                        			 }finally {
                        				 sec_cursor.close(); 
                        			 }
                                    
                                }
                                if(cmp.equals("<=")){
                                	hasIndexed = 1;
                               	 	indexCol = tableName + "."+ pred;
                               	 EntityCursor<TempIndexEntity> sec_cursor = si.entities(catalog.indexTxn.get(tableName).get(index), Integer.MIN_VALUE, false, cmpVal, true,config);
                               	 	try {
                               	 		for (TempIndexEntity sec : sec_cursor) {
                               	 			String pKey = sec.getPKey();
                               	 			da = new TupleDA(store.get(tableIndex.get(tableName)));
                               	 			ArrayList<String> t = da.pIdx.get(catalog.indexTxn.get(tableName).get(index),pKey,LockMode.READ_UNCOMMITTED).getValue();
                               	 			tupleGroups.AddValue(tableName, t); 
                               	 		}
                        			 // Always make sure the cursor is closed when we are done with it.
                        			 }finally {
                        				 sec_cursor.close(); 
                        			 }
                                    
                                }
                                if(hasIndexed == 1){
                                	break;
                                }
                            	
                            	
                            }else if(cmpFlag == 1){
                            	SecondaryIndex<String,String,TempIndexEntity> si = catalog.indexStore.get(tableName).get(index).getSecondaryIndex(pi, String.class, "stringKey"); 
                            	
                                if(cmp.equals(">")){
                                	hasIndexed = 1;
                               	 	indexCol = tableName + "."+ pred;
                                    
                                    
                                    EntityCursor<TempIndexEntity> sec_cursor = si.entities(catalog.indexTxn.get(tableName).get(index), val, false, null, false, config);
                                    try {
                               	 		for (TempIndexEntity sec : sec_cursor) {
                               	 			String pKey = sec.getPKey();
                               	 			da = new TupleDA(store.get(tableIndex.get(tableName)));
                               	 			ArrayList<String> t = da.pIdx.get(catalog.indexTxn.get(tableName).get(index),pKey,LockMode.READ_UNCOMMITTED).getValue();
                               	 			tupleGroups.AddValue(tableName, t); 
                               	 		}
                        			 // Always make sure the cursor is closed when we are done with it.
                        			 }finally {
                        				 sec_cursor.close(); 
                        			 }
                                   
                                    
                                }
                                
                                if(cmp.equals(">=")){
                                	hasIndexed = 1;
                               	 	indexCol = tableName + "."+ pred;
                                    
                                    
                                    EntityCursor<TempIndexEntity> sec_cursor = si.entities(catalog.indexTxn.get(tableName).get(index), val, true, null, false, config);
                                    try {
                               	 		for (TempIndexEntity sec : sec_cursor) {
                               	 			String pKey = sec.getPKey();
                               	 			da = new TupleDA(store.get(tableIndex.get(tableName)));
                               	 			ArrayList<String> t = da.pIdx.get(catalog.indexTxn.get(tableName).get(index),pKey,LockMode.READ_UNCOMMITTED).getValue();
                               	 			tupleGroups.AddValue(tableName, t); 
                               	 		}
                        			 // Always make sure the cursor is closed when we are done with it.
                        			 }finally {
                        				 sec_cursor.close(); 
                        			 }
                                   
                                    
                                }
                                
                                if(cmp.equals("<")){
                                	hasIndexed = 1;
                               	 	indexCol = tableName + "."+ pred;
                                    
                                    
                                    EntityCursor<TempIndexEntity> sec_cursor = si.entities(catalog.indexTxn.get(tableName).get(index), null, false, val, false, config);
                                    try {
                               	 		for (TempIndexEntity sec : sec_cursor) {
                               	 			String pKey = sec.getPKey();
                               	 			da = new TupleDA(store.get(tableIndex.get(tableName)));
                               	 			ArrayList<String> t = da.pIdx.get(catalog.indexTxn.get(tableName).get(index),pKey,LockMode.READ_UNCOMMITTED).getValue();
                               	 			tupleGroups.AddValue(tableName, t); 
                               	 		}
                        			 // Always make sure the cursor is closed when we are done with it.
                        			 }finally {
                        				 sec_cursor.close(); 
                        			 }
                                   
                                    
                                }
                                
                                if(cmp.equals("<=")){
                                	hasIndexed = 1;
                               	 	indexCol = tableName + "."+ pred;
                                    
                                    
                                    EntityCursor<TempIndexEntity> sec_cursor = si.entities(catalog.indexTxn.get(tableName).get(index), null, false, val, true, config);
                                    try {
                               	 		for (TempIndexEntity sec : sec_cursor) {
                               	 			String pKey = sec.getPKey();
                               	 			da = new TupleDA(store.get(tableIndex.get(tableName)));
                               	 			ArrayList<String> t = da.pIdx.get(catalog.indexTxn.get(tableName).get(index),pKey,LockMode.READ_UNCOMMITTED).getValue();
                               	 			tupleGroups.AddValue(tableName, t); 
                               	 		}
                        			 // Always make sure the cursor is closed when we are done with it.
                        			 }finally {
                        				 sec_cursor.close(); 
                        			 }
                                   
                                    
                                }
                                
                                if(hasIndexed == 1){
                                	break;
                                }
                            	
                            }
                    
            				
            			}
            			tmp2 = tmp2.right;
            		}
            	}
            	
            	if(getWherePred()!=null){
                    tmp2 = getWherePred().arg[0].arg[0];
            	}

            	
            	if(hasIndexed == 1){
            		//second pass, for columns which are not indexed
                	while(tmp2!=null){
                		if(tmp2.arg[0].className().equals("SimpleClause")){
                			String cmp = tmp2.arg[0].arg[1].tok[0].getTokenName();
                            String val = tmp2.arg[0].arg[2].tok[0].getTokenName();
                            String pred = new String();
                            String s = new String(); //table name
                            if(tmp2.arg[0].arg[0].className().equals("FieldName")){
                                pred = tmp2.arg[0].arg[0].tok[0].getTokenName();
                                for( String t : tableGroups.GetTableList()){
                                    if(tableGroups.GetColInfo().get(t).contains(pred))
                                    s = t;
                                 }
                            }
                            if(tmp2.arg[0].arg[0].className().equals("RelDotField")){
                                pred = tmp2.arg[0].arg[0].arg[1].tok[0].getTokenName();
                                s = tmp2.arg[0].arg[0].arg[0].tok[0].getTokenName();
                            }
                         
                            if(!s.equals(tableName)){
                                isSameTable = false;
                                tmp2 = tmp2.right;
                                continue;
                            }
                            
                            
                            
                            int cmpFlag = 1;
                            int cmpVal = 0;
                            
                            int index = catalog.ColInfo.get(tableName).indexOf(pred);
                            
                            if(catalog.isIndexed.get(s).get(index).equals(true)){
                            	tmp2 = tmp2.right;
                                continue;
                            }
                            
                            if(catalog.ColField.get(tableName).get(index).equals("int")){
                                cmpVal=Integer.parseInt(val);
                                cmpFlag = 0;
                            }
                            
                            List tmpRemove = new ArrayList();
                            
                            if(cmp.equals("=")){
                            	for(ArrayList<String> ss: tupleGroups.GetValue().get(tableName)){
                            		if(!ss.get(index).equals(val)){
                  	                  tmpRemove.add(ss);
                  	                 }
                            	}
                            	
                            }
                            
                            if(cmp.equals(">")){
              	              if(cmpFlag == 0){
              	                for(ArrayList<String> ss: tupleGroups.GetValue().get(tableName)){
              	                  int tempint=Integer.parseInt(ss.get(index));
              	                  if(tempint <= cmpVal){
              	                    tmpRemove.add(ss);
              	                  }
              	                }
              	              }
              	              else{
              	                for(ArrayList<String> ss: tupleGroups.GetValue().get(tableName)){
              	                  if(ss.get(index).compareTo(val) <= 0){
              	                    tmpRemove.add(ss);
              	                  }
              	                }
              	              }
                            	
                            }
                            
                            if(cmp.equals("<")){
                	              if(cmpFlag == 0){
                    	                for(ArrayList<String> ss: tupleGroups.GetValue().get(tableName)){
                    	                  int tempint=Integer.parseInt(ss.get(index));
                    	                  if(tempint >= cmpVal){
                    	                    tmpRemove.add(ss);
                    	                  }
                    	                }
                    	              }
                    	              else{
                    	                for(ArrayList<String> ss: tupleGroups.GetValue().get(tableName)){
                    	                  if(ss.get(index).compareTo(val) >= 0){
                    	                    tmpRemove.add(ss);
                    	                  }
                    	                }
                    	              }
                            	
                            }
                            
                            if(cmp.equals(">=")){
                	              if(cmpFlag == 0){
                    	                for(ArrayList<String> ss: tupleGroups.GetValue().get(tableName)){
                    	                  int tempint=Integer.parseInt(ss.get(index));
                    	                  if(tempint < cmpVal){
                    	                    tmpRemove.add(ss);
                    	                  }
                    	                }
                    	              }
                    	              else{
                    	                for(ArrayList<String> ss: tupleGroups.GetValue().get(tableName)){
                    	                  if(ss.get(index).compareTo(val) < 0){
                    	                    tmpRemove.add(ss);
                    	                  }
                    	                }
                    	              }
                            	
                            }
                            
                            if(cmp.equals("<=")){
                	              if(cmpFlag == 0){
                    	                for(ArrayList<String> ss: tupleGroups.GetValue().get(tableName)){
                    	                  int tempint=Integer.parseInt(ss.get(index));
                    	                  if(tempint > cmpVal){
                    	                    tmpRemove.add(ss);
                    	                  }
                    	                }
                    	              }
                    	              else{
                    	                for(ArrayList<String> ss: tupleGroups.GetValue().get(tableName)){
                    	                  if(ss.get(index).compareTo(val) > 0){
                    	                    tmpRemove.add(ss);
                    	                  }
                    	                }
                    	              }
                            	
                            }
                            
                            if(cmp.equals("!")){
                            	for(ArrayList<String> ss: tupleGroups.GetValue().get(tableName)){
                            		if(ss.get(index).equals(val)){
                  	                  tmpRemove.add(ss);
                  	                 }
                            	}
                            	
                            }
                            tupleGroups.GetValue().get(tableName).removeAll(tmpRemove);
                		}
                		tmp2 = tmp2.right;
                	}
            		
            	}
            }
            //no index or only has index on "!="     
            if(hasIndex.equals(false)||hasIndexed == 0){
            	PrimaryIndex<String,Tuple> pi = store.get(tableIndex.get(tableName)).getPrimaryIndex(String.class, Tuple.class);
                CursorConfig config = new CursorConfig();
                config.setReadUncommitted(true);  
                EntityCursor<Tuple> pi_cursor = pi.entities(txn.get(tableIndex.get(tableName)),config);
                try {
                	for (Tuple seci : pi_cursor) {
                		flag = 1;
                		if(getWherePred()!=null){
                            tmp2 = getWherePred().arg[0].arg[0];
                        }

                        isSameTable = true;
                        while(tmp2 != null){
                        	flag = 1;
                        	if(tmp2.arg[0].className().equals("SimpleClause")){
                        		String cmp = tmp2.arg[0].arg[1].tok[0].getTokenName();
                                String val = tmp2.arg[0].arg[2].tok[0].getTokenName();
                                ArrayList<String> temp = seci.getValue();
                                
                                String pred = new String();
                                String s = new String(); //table name
                                if(tmp2.arg[0].arg[0].className().equals("FieldName")){
                                     pred = tmp2.arg[0].arg[0].tok[0].getTokenName();
                                     for( String t : tableGroups.GetTableList()){
                                         if(tableGroups.GetColInfo().get(t).contains(pred))
                                         s = t;
                                        }
                                    }
                                    if(tmp2.arg[0].arg[0].className().equals("RelDotField")){
                                        pred = tmp2.arg[0].arg[0].arg[1].tok[0].getTokenName();
                                        s = tmp2.arg[0].arg[0].arg[0].tok[0].getTokenName();
                                    }
                                 
                                    if(!s.equals(tableName)){
                                        isSameTable = false;
                                        tmp2 = tmp2.right;
                                        continue;
                                    }
                                    
                                    int cmpFlag = 1;
                                    int cmpVal = 0;
                                    
                                    int index = catalog.ColInfo.get(tableName).indexOf(pred);
                                 
                                    if(catalog.ColField.get(tableName).get(index).equals("int")){
                                        cmpVal=Integer.parseInt(val);
                                        cmpFlag = 0;
                                    }
                                    
                                    if(cmp.equals("=")){
                                        if(!temp.get(index).equals(val))
                                            flag = 0;
                                    
                                    }
                            
                                    if(cmp.equals(">")){
                                        if(cmpFlag == 0){
                                            int tempint=Integer.parseInt(temp.get(index));
                                            if(tempint <= cmpVal){
                                                flag = 0;
                                            }
                                        }
                           
                                    else{
                                        if(temp.get(index).compareTo(val) <= 0){
                                            flag = 0;
                                        }
                                    }
                                    }
                            
                                    if(cmp.equals("<")){
                                        if(cmpFlag == 0){
                                            int tempint=Integer.parseInt(temp.get(index));
                                            if(tempint >= cmpVal){
                                                flag = 0;
                                            }
                                        }
                            
                                    else{
                                        if(temp.get(index).compareTo(val) >= 0){
                                            flag = 0;
                                        }
                                        }
                                    }
                            
                                    if(cmp.equals(">=")){
                                        if(cmpFlag == 0){
                                            int tempint=Integer.parseInt(temp.get(index));
                                            if(tempint < cmpVal){
                                                flag = 0;
                                            }
                                        }
                            
                                    else{
                                        if(temp.get(index).compareTo(val) < 0){
                                            flag = 0;
                                        }
                                    }   
                                    }
                            
                                    if(cmp.equals("<=")){
                                        if(cmpFlag == 0){
                                            int tempint=Integer.parseInt(temp.get(index));
                                            if(tempint > cmpVal){
                                                flag = 0;
                                            }
                                        }
                           
                                    else{
                                        if(temp.get(index).compareTo(val) > 0){
                                            flag = 0;
                                        }
                                    }
                                    }   
                            
                                    if(cmp.equals("!")){
                                        if(temp.get(index).equals(val))
                                            flag = 0;
                                    
                                    }
                                    
                                    if(flag == 1){
                                        tmp2 = tmp2.right;
                                    	continue;
                                    }
                                    else
                                        break;
                        	}
                        	tmp2 = tmp2.right;
                        	
                        }
                        	if(flag == 1){
                        		tupleGroups.AddValue(tableName, seci.getValue());
                        	}
                	}
                	
                }
                finally {
                // Always close the cursor
                pi_cursor.close();
                }
            	
            }
            
            
        }
        
        
        //handle join relation
        if(getWherePred()!=null){
      	     tmp2 = getWherePred().arg[0].arg[0];
      	}
        
        int joinRelationCount = 0;
        
        while(tmp2 != null){
    		if(tmp2.arg[0].className().equals("JoinClause")){
    			joinRelationCount ++;
    		}
    		tmp2 = tmp2.right;
        }
        
        if(getWherePred()!=null){
     	     tmp2 = getWherePred().arg[0].arg[0];
     	}
        
        ArrayList<String> joinedTableList = new ArrayList<String> ();
        
        while(tmp2 != null){
        	if(tmp2.arg[0].className().equals("JoinClause")){
        		ArrayList<ArrayList<String>> temp = new ArrayList<ArrayList<String>>();
        		if(!tupleGroups.FindTable("finalTable")){
        			tupleGroups.AddTable("finalTable");
        	    	tableGroups.AddTable("finalTable");
        	    	
        	    	tupleGroups.GetValue().put("finalTable", new ArrayList<ArrayList<String>>());
        	    	tableGroups.GetColInfo().put("finalTable", new ArrayList<String>());
        	    	tableGroups.GetColField().put("finalTable", new ArrayList<String>());
        		}
        		
        		String tb1 = new String();
    			String tb2 = new String();
    			String tableName1 = new String();
    	    	String tableName2 = new String();
    	    	
    	    	if(tmp2.arg[0].arg[0].className().equals("FieldName")){
    				tb1 = tmp2.arg[0].arg[0].tok[0].getTokenName();
    				for( String t : tableGroups.GetTableList()){
   	          			if(tableGroups.GetColInfo().get(t).contains(tb1))
   	          				tableName1 = t;
   	          		}
    			}
    			
    			else if(tmp2.arg[0].arg[0].className().equals("RelDotField")){
    				tb1 = tmp2.arg[0].arg[0].arg[1].tok[0].getTokenName();
    				tableName1 = tmp2.arg[0].arg[0].arg[0].tok[0].getTokenName();
    			}
    			
    			if(tmp2.arg[0].arg[0].right.className().equals("FieldName")){
    				tb2 = tmp2.arg[0].arg[0].right.tok[0].getTokenName();
    				for( String t : tableGroups.GetTableList()){
	          			if(tableGroups.GetColInfo().get(t).contains(tb2))
	          				tableName2 = t;
	          		}
    			}
    			
    			else if(tmp2.arg[0].arg[0].right.className().equals("RelDotField")){
    				tb2 = tmp2.arg[0].arg[0].right.arg[1].tok[0].getTokenName();
    				tableName2 = tmp2.arg[0].arg[0].right.arg[0].tok[0].getTokenName();
    			}
    			
    			nameSearch.put(tb1, tb2);
				nameSearch.put(tb2, tb1);
				
				//handle self join
				if(tableName1.equals(tableName2)){
					if(!joinedTableList.contains(tableName1)){
						joinedTableList.add(tableName1);
						
						tupleGroups.GetValue().put("finalTable", tupleGroups.GetValue().get(tableName1));
						
						int pos1 = tableGroups.GetColInfo().get(tableName1).indexOf(tb1);
						int pos2 = tableGroups.GetColInfo().get(tableName1).indexOf(tb2);
						
						List tmpRemove = new ArrayList();
						for(ArrayList<String> ss: tupleGroups.GetValue().get(tableName1)){
							if(!ss.get(pos1).equals(ss.get(pos2))){
								tmpRemove.add(ss);
							}
						}
						tupleGroups.GetValue().get("finalTable").removeAll(tmpRemove);
						
					}
					//to do ....already join into
					
					
					
				}
				else if(tupleGroups.GetValue().get("finalTable").size()==0){
					joinRelationCount++;
					int index1 = tableGroups.GetColInfo().get(tableName1).indexOf(tb1);
	          		int index2 = tableGroups.GetColInfo().get(tableName2).indexOf(tb2);
	          		
	          		joinedTableList.add(tableName1);
	          		joinedTableList.add(tableName2);
	          		
	          		
	          		if(tupleGroups.GetValue().get(tableName1).size()>tupleGroups.GetValue().get(tableName2).size()){
	          			MultiMap multiMap = new MultiHashMap();  
	          			//build Hashtable
	          			for(ArrayList <String> s : tupleGroups.GetValue().get(tableName1)){
	          				multiMap.put(s.get(index1), s);
	          			}
	          			
	          			//search and join
	          			for(ArrayList <String> s : tupleGroups.GetValue().get(tableName2)){
	          				if(multiMap.get(s.get(index2))!=null){
	          					Iterator itet = ((Collection) multiMap.get(s.get(index2))).iterator();
	          					while (itet.hasNext()) {
	          						ArrayList<String> res = (ArrayList<String>) itet.next(); 
	          						ArrayList <String> t1 = new ArrayList();
		        	          		ArrayList <String> t2 = new ArrayList();
		        	          		t2.addAll(new ArrayList <String>(s));
		        	          		t1.addAll(new ArrayList <String>(res));
		        	          		t2.remove(index2);
		          					t1.addAll(t2);
		          					temp.add(t1);
	          						
	          					}

	          				}
	          				
	          			}
	          			tupleGroups.GetValue().put("finalTable", temp);
	          			
	          		}else{
	          			MultiMap multiMap = new MultiHashMap();  
	          			//build Hashtable
	          			for(ArrayList <String> s : tupleGroups.GetValue().get(tableName2)){
	          				multiMap.put(s.get(index2), s);
	          			}
	          			
	          			//search and join
	          			for(ArrayList <String> s : tupleGroups.GetValue().get(tableName1)){
	          				if(multiMap.get(s.get(index1))!=null){
	          					Iterator itet = ((Collection) multiMap.get(s.get(index1))).iterator();
	          					while (itet.hasNext()) {
	          						ArrayList<String> res = (ArrayList<String>) itet.next(); 
	          						ArrayList <String> t1 = new ArrayList();
		        	          		ArrayList <String> t2 = new ArrayList();
		        	          		t1.addAll(new ArrayList <String>(s));
		        	          		t2.addAll(new ArrayList <String>(res));
		        	          		t2.remove(index2);
		          					t1.addAll(t2);
		          					temp.add(t1);
	          						
	          					}

	          				}
	          				
	          			}
	          			tupleGroups.GetValue().put("finalTable", temp);
	          			
	          		}
	          		
	          		
	          		ArrayList <String> t1 = new ArrayList();
	          		ArrayList <String> t2 = new ArrayList();
	          		t1.addAll(new ArrayList <String>(catalog.ColField.get(tableName1)));
	          		t2.addAll(new ArrayList <String>(catalog.ColField.get(tableName2)));
	          		t2.remove(index2);    	
  					t1.addAll(t2);
  					tableGroups.GetColField().put("finalTable", new ArrayList <String>(t1));
  					
  					t1.clear();
  					t2.clear();
  					
  					t1.addAll(new ArrayList <String>(catalog.ColInfo.get(tableName1)));
	          		t2.addAll(new ArrayList <String>(catalog.ColInfo.get(tableName2)));
	          		//nameSearch.put(tableName2+t2.get(index2),t2.get(index2));
	          		nameSearch.put(tableName2+t2.get(index2),tableName1+t1.get(index1));
	          		nameSearch.put(t2.get(index2),tableName2+t2.get(index2));
	          		t2.remove(index2);
	          		for(int i=0;i<t1.size();++i){
	          			String temp1 = new String(t1.get(i));
	          			t1.set(i,tableName1+temp1);
	          			nameSearch.put(temp1,tableName1+temp1);
	          		}
	          		for(int j=0;j<t2.size();++j){
	          			String temp2 = new String(t2.get(j));
	          			t2.set(j,tableName2+temp2);
	          			nameSearch.put(temp2,tableName2+temp2);
	          		}
  					t1.addAll(t2);
  					tableGroups.GetColInfo().put("finalTable", new ArrayList <String>(t1));  
				}
				else if(joinedTableList.contains(tableName1)&&joinedTableList.contains(tableName2)){
					joinRelationCount++;
					int pos1;
					int pos2;
					
					
					pos1 = tableGroups.GetColInfo().get("finalTable").indexOf(tableName1 + tb1);
					pos2 = tableGroups.GetColInfo().get("finalTable").indexOf(tableName2 + tb2);
					
					List tmpRemove = new ArrayList();
					for(ArrayList<String> ss: tupleGroups.GetValue().get("finalTable")){
						if(!ss.get(pos1).equals(ss.get(pos2))){
							tmpRemove.add(ss);
						}
					}
					tupleGroups.GetValue().get("finalTable").removeAll(tmpRemove);
					
						
					
					
					
					
				}
				else if(joinedTableList.contains(tableName1)){
					joinRelationCount++;
					joinedTableList.add(tableName2);
					int index1 = tableGroups.GetColInfo().get("finalTable").indexOf(tableName1+tb1);
	          		int index2 = tableGroups.GetColInfo().get(tableName2).indexOf(tb2);
	          		
	        		if(tupleGroups.GetValue().get("finalTable").size()>tupleGroups.GetValue().get(tableName2).size()){
	          			MultiMap multiMap = new MultiHashMap();  
	          			//build Hashtable
	          			for(ArrayList <String> s : tupleGroups.GetValue().get("finalTable")){
	          				multiMap.put(s.get(index1), s);
	          			}
	          			
	          			//search and join
	          			for(ArrayList <String> s : tupleGroups.GetValue().get(tableName2)){
	          				if(multiMap.get(s.get(index2))!=null){
	          					Iterator itet = ((Collection) multiMap.get(s.get(index2))).iterator();
	          					while (itet.hasNext()) {
	          						ArrayList<String> res = (ArrayList<String>) itet.next(); 
	          						ArrayList <String> t1 = new ArrayList();
		        	          		ArrayList <String> t2 = new ArrayList();
		        	          		t2.addAll(new ArrayList <String>(s));
		        	          		t1.addAll(new ArrayList <String>(res));
		        	          		t2.remove(index2);
		          					t1.addAll(t2);
		          					temp.add(t1);
	          						
	          					}

	          				}
	          				
	          			}	
	          			tupleGroups.GetValue().remove("finalTable");
	          			tupleGroups.GetValue().put("finalTable", temp);
	          			
	          		}else{
	          			MultiMap multiMap = new MultiHashMap();  
	          			//build Hashtable
	          			for(ArrayList <String> s : tupleGroups.GetValue().get(tableName2)){
	          				multiMap.put(s.get(index2), s);
	          			}
	          			
	          			//search and join
	          			for(ArrayList <String> s : tupleGroups.GetValue().get("finalTable")){
	          				if(multiMap.get(s.get(index1))!=null){
	          					Iterator itet = ((Collection) multiMap.get(s.get(index1))).iterator();
	          					while (itet.hasNext()) {
	          						ArrayList<String> res = (ArrayList<String>) itet.next(); 
	          						ArrayList <String> t1 = new ArrayList();
		        	          		ArrayList <String> t2 = new ArrayList();
		        	          		t1.addAll(new ArrayList <String>(s));
		        	          		t2.addAll(new ArrayList <String>(res));
		        	          		t2.remove(index2);
		          					t1.addAll(t2);
		          					temp.add(t1);
	          						
	          					}

	          				}
	          				
	          			}
	          			tupleGroups.GetValue().remove("finalTable");
	          			tupleGroups.GetValue().put("finalTable", temp);
	          			
	          		}
	        		
	        		ArrayList <String> t1 = new ArrayList();
	          		ArrayList <String> t2 = new ArrayList();
	          		t1.addAll(new ArrayList <String>(tableGroups.GetColField().get("finalTable")));
	          		t2.addAll(new ArrayList <String>(tableGroups.GetColField().get(tableName2)));
	          		t2.remove(index2);	
  					t1.addAll(t2);
  					tableGroups.GetColField().remove("finalTable");
  					tableGroups.GetColField().put("finalTable", new ArrayList <String>(t1));
  					
  					t1.clear();
  					t2.clear();
  					
  					int tmpIndex = tableGroups.GetColInfo().get(tableName1).indexOf(tb1);
  					
  					t1.addAll(tableGroups.GetColInfo().get("finalTable"));
	          		t2.addAll(tableGroups.GetColInfo().get(tableName2));
	          		nameSearch.put(tableName2+t2.get(index2),tableName1+tb1);
	          		nameSearch.put(t2.get(index2),tableName2+t2.get(index2));
	          		t2.remove(index2);
	          		//same colname different table
	          		//for(int i=0;i<t1.size();++i)
	          		//	for(int j=0;j<t2.size();++j){
	          		//		if(t1.get(i).equals(t2.get(j))){
	          		//			String temp1 = new String(t1.get(i));
	          		//			String temp2 = new String(t2.get(j));
	          		//			t1.set(i,tableName1+temp1);
	          		//			t2.set(j,tableName2+temp2);
	          		//		}
	          		//		else{
	          		//			nameSearch.put(tableName1+t1.get(i),t1.get(i));
	          		//			nameSearch.put(tableName2+t2.get(j),t2.get(j));
	          		//		}
	          		//			
	          		//	}
	          		for(int j=0;j<t2.size();++j){
	          			String temp2 = new String(t2.get(j));
	          			t2.set(j,tableName2+temp2);
	          			nameSearch.put(temp2,tableName2+temp2);
	          		}
  					t1.addAll(t2);
  					tableGroups.GetColInfo().remove("finalTable");
  					tableGroups.GetColInfo().put("finalTable", new ArrayList <String>(t1));  
	          		
					
				}
				else if(joinedTableList.contains(tableName2)){
					joinRelationCount++;
					joinedTableList.add(tableName1);
					
					int index1 = tableGroups.GetColInfo().get("finalTable").indexOf(tableName2+tb2);
	        		int index2 = tableGroups.GetColInfo().get(tableName1).indexOf(tb1);
	        		
	        		if(tupleGroups.GetValue().get("finalTable").size()>tupleGroups.GetValue().get(tableName1).size()){
	          			MultiMap multiMap = new MultiHashMap();  
	          			//build Hashtable
	          			for(ArrayList <String> s : tupleGroups.GetValue().get("finalTable")){
	          				multiMap.put(s.get(index1), s);
	          			}
	          			
	          			//search and join
	          			for(ArrayList <String> s : tupleGroups.GetValue().get(tableName1)){
	          				if(multiMap.get(s.get(index2))!=null){
	          					Iterator itet = ((Collection) multiMap.get(s.get(index2))).iterator();
	          					while (itet.hasNext()) {
	          						ArrayList<String> res = (ArrayList<String>) itet.next(); 
	          						ArrayList <String> t1 = new ArrayList();
		        	          		ArrayList <String> t2 = new ArrayList();
		        	          		t2.addAll(new ArrayList <String>(s));
		        	          		t1.addAll(new ArrayList <String>(res));
		        	          		t2.remove(index2);
		          					t1.addAll(t2);
		          					temp.add(t1);
	          						
	          					}

	          				}
	          				
	          			}	
	          			tupleGroups.GetValue().remove("finalTable");
	          			tupleGroups.GetValue().put("finalTable", temp);
	          			
	          		}else{
	          			MultiMap multiMap = new MultiHashMap();  
	          			//build Hashtable
	          			for(ArrayList <String> s : tupleGroups.GetValue().get(tableName1)){
	          				multiMap.put(s.get(index2), s);
	          			}
	          			
	          			//search and join
	          			for(ArrayList <String> s : tupleGroups.GetValue().get("finalTable")){
	          				if(multiMap.get(s.get(index1))!=null){
	          					Iterator itet = ((Collection) multiMap.get(s.get(index1))).iterator();
	          					while (itet.hasNext()) {
	          						ArrayList<String> res = (ArrayList<String>) itet.next(); 
	          						ArrayList <String> t1 = new ArrayList();
		        	          		ArrayList <String> t2 = new ArrayList();
		        	          		t1.addAll(new ArrayList <String>(s));
		        	          		t2.addAll(new ArrayList <String>(res));
		        	          		t2.remove(index2);
		          					t1.addAll(t2);
		          					temp.add(t1);
	          						
	          					}

	          				}
	          				
	          			}
	          			tupleGroups.GetValue().remove("finalTable");
	          			tupleGroups.GetValue().put("finalTable", temp);
	          			
	          		}
	        		
	        		ArrayList <String> t1 = new ArrayList();
	        		ArrayList <String> t2 = new ArrayList();
	        		t1.addAll(new ArrayList <String>(tableGroups.GetColField().get("finalTable")));
	        		t2.addAll(new ArrayList <String>(tableGroups.GetColField().get(tableName1)));
	        		t2.remove(index2);
	        	
	          		
					t1.addAll(t2);
					tableGroups.GetColField().remove("finalTable");
					tableGroups.GetColField().put("finalTable", new ArrayList <String>(t1));
					
					t1.clear();
					t2.clear();
					
					t1.addAll(new ArrayList <String>(tableGroups.GetColInfo().get("finalTable")));
	        		t2.addAll(new ArrayList <String>(tableGroups.GetColInfo().get(tableName1)));
	        		nameSearch.put(tableName1+t2.get(index2),tableName2+tb2);
	        		nameSearch.put(t2.get(index2),tableName1+t2.get(index2));
	        		t2.remove(index2);
	        		
	        		//same colname different table
	        		/*
	          		for(int i=0;i<t1.size();++i)
	          			for(int j=0;j<t2.size();++j){
	          				if(t1.get(i).equals(t2.get(j))){
	          					String temp1 = new String(t1.get(i));
	          					String temp2 = new String(t2.get(j));
	          					t1.set(i,tableName2+temp1);
	          					t2.set(j,tableName1+temp2);
	          				}
	          				else{
	          					nameSearch.put(tableName2+t1.get(i),t1.get(i));
	          					nameSearch.put(tableName1+t2.get(j),t2.get(j));
	          				}
	          					
	          			}*/
	          		for(int j=0;j<t2.size();++j){
	          			String temp1 = new String(t2.get(j));
	          			t2.set(j,tableName1+temp1);
	          			nameSearch.put(temp1,tableName1+temp1);
	          		}
	          		
					t1.addAll(t2);
					tableGroups.GetColInfo().remove("finalTable");
					tableGroups.GetColInfo().put("finalTable", new ArrayList <String>(t1));  
					
				}
				
				
        		
        	}
        	tmp2 = tmp2.right;
        }
        
       // for(int i =0; i<tupleGroups.GetValue().get("finalTable").size();++i){
       // 	System.out.println(tupleGroups.GetValue().get("finalTable").get(i));
       // }
        
       

        long endtime = System.currentTimeMillis();
        
    	if(tableGroups.GetTableList().size() == 1){
    		if(getProj_list ().className().equals("All")){
    			
    			for(int i=0;i<tableGroups.GetColInfo().get(tableGroups.GetTableList().get(0)).size();++i){
					System.out.print(tableGroups.GetColInfo().get(tableGroups.GetTableList().get(0)).get(i));
					if(i!=tableGroups.GetColInfo().get(tableGroups.GetTableList().get(0)).size()-1)
						System.out.print(" ");
    				
    			}
    			System.out.println();
    			

				
    			for(ArrayList<String> ss: tupleGroups.GetValue().get(tableGroups.GetTableList().get(0))){
	        		for(int i = 0;i<ss.size();++i){
	        			System.out.print(ss.get(i));
	        			if(i!=ss.size()-1)
	        				System.out.print(" ");
	        		}
	        		System.out.println();
    			}
    			
    		}
    		else{
    			AstNode tmp3 = getProj_list ().arg[0].arg[0];
    			ArrayList<Integer> indexList = new ArrayList();
    			while(tmp3!=null){
    				String feaName = new String();
    				if(tmp3.arg[0].className().equals("FieldName")){
    					feaName = tmp3.arg[0].tok[0].getTokenName();
    				}
    				else
    					feaName = tmp3.arg[0].arg[1].tok[0].getTokenName();
        	        indexList.add(tableGroups.GetColInfo().get(tableGroups.GetTableList().get(0)).indexOf(feaName)); 
        	        tmp3 = tmp3.right;
    			}
    			
    			for(int i=0;i<indexList.size();++i){
					System.out.print(tableGroups.GetColInfo().get(tableGroups.GetTableList().get(0)).get(indexList.get(i)));
					if(i!=indexList.size()-1)
						System.out.print(" ");
    				
    			}
    			System.out.println();
    			
    			
    			for(ArrayList<String> ss: tupleGroups.GetValue().get(tableGroups.GetTableList().get(0))){
    					for(int j=0;j<indexList.size();++j){
    						System.out.print(ss.get(indexList.get(j)));
    						if(j!=indexList.size()-1)
    							System.out.print(" ");
    					}
    				System.out.println();
    			}
    		}
    		System.out.println(tupleGroups.GetValue().get(tableGroups.GetTableList().get(0)).size()+" "+"row selected (time taken ="+ (endtime-starttime) +"ms)" );
    	}
    	
    	else{
    		if(getProj_list ().className().equals("All")){
    			
    			for(int i=0;i<tableGroups.GetColInfo().get("finalTable").size();++i){
					System.out.print(tableGroups.GetColInfo().get("finalTable").get(i));
					if(i!=tableGroups.GetColInfo().get("finalTable").size()-1)
						System.out.print(" ");
    				
    			}
    			
    			System.out.println();
    			for(ArrayList<String> ss: tupleGroups.GetValue().get("finalTable")){
	        		for(int i = 0;i<ss.size();++i){
	        			System.out.print(ss.get(i));
	        			if(i!=ss.size()-1)
	        				System.out.print(" ");
	        		}
	        		System.out.println();
    			
    			}
    			
    		}
    		else{
    			AstNode tmp3 = getProj_list ().arg[0].arg[0];
    			ArrayList<Integer> indexList = new ArrayList();
    			while(tmp3!=null){
    				if(tmp3.arg[0].className().equals("FieldName")){
        	        String feaName = tmp3.arg[0].tok[0].getTokenName();
        	        //indexList.add(tableGroups.ColInfo.get(tableGroups.TableName.get(0)).indexOf(feaName));
        	        if(tableGroups.GetColInfo().get("finalTable").contains(feaName))
        	        	indexList.add(tableGroups.GetColInfo().get("finalTable").indexOf(feaName));
        	        else
        	        	indexList.add(tableGroups.GetColInfo().get("finalTable").indexOf(nameSearch.get(feaName)));
    				}
    				
    				if(tmp3.arg[0].className().equals("RelDotField")){
    					String feaName = tmp3.arg[0].arg[0].tok[0].getTokenName() + tmp3.arg[0].arg[1].tok[0].getTokenName();
            	        //indexList.add(tableGroups.ColInfo.get(tableGroups.TableName.get(0)).indexOf(feaName));
            	    if(tableGroups.GetColInfo().get("finalTable").contains(feaName))
            	        indexList.add(tableGroups.GetColInfo().get("finalTable").indexOf(feaName));
            	    else
            	        indexList.add(tableGroups.GetColInfo().get("finalTable").indexOf(nameSearch.get(feaName)));
    				}
    				
    				
        	        tmp3 = tmp3.right;
    			}
    			
    			
    			for(int i=0;i<indexList.size();++i){
					System.out.print(tableGroups.GetColInfo().get("finalTable").get(indexList.get(i)));
					if(i!=indexList.size()-1)
						System.out.print(" ");
    				
    			}
    			System.out.println();
    			
    			for(ArrayList<String> ss: tupleGroups.GetValue().get("finalTable")){
    					for(int j=0;j<indexList.size();++j){
    						System.out.print(ss.get(indexList.get(j)));
    						if(j!=indexList.size()-1)
    							System.out.print(" ");
    					}
    				System.out.println();
    			}
    			
    		}
    		System.out.println(tupleGroups.GetValue().get("finalTable").size()+" "+"row selected (time taken ="+ (endtime-starttime) +"ms)");
    		
    		
    	}
        
        
        
        
        
        
        
        
    }

    public AstToken getFROM () {
        
        return (AstToken) tok [1] ;
    }

    public Proj_list getProj_list () {
        
        return (Proj_list) arg [0] ;
    }

    public Rel_list getRel_list () {
        
        return (Rel_list) arg [1] ;
    }

    public AstToken getSELECT () {
        
        return (AstToken) tok [0] ;
    }

    public AstToken getSEMI () {
        
        return (AstToken) tok [2] ;
    }

    public WherePred getWherePred () {
        
        AstNode node = arg[2].arg [0] ;
        return (node != null) ? (WherePred) node : null ;
    }

    public boolean[] printorder () {
        
        return new boolean[] {true, false, true, false, false, true} ;
    }

    public SelectCmd setParms
    (AstToken tok0, Proj_list arg0, AstToken tok1, Rel_list arg1, AstOptNode arg2, AstToken tok2)
    {
        
        arg = new AstNode [ARG_LENGTH] ;
        tok = new AstTokenInterface [TOK_LENGTH] ;
        
        tok [0] = tok0 ;            /* SELECT */
        arg [0] = arg0 ;            /* Proj_list */
        tok [1] = tok1 ;            /* FROM */
        arg [1] = arg1 ;            /* Rel_list */
        arg [2] = arg2 ;            /* [WherePred] */
        tok [2] = tok2 ;            /* SEMI */
        
        InitChildren () ;
        return (SelectCmd) this ;
    }

}
