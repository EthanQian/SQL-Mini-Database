// Automatically generated code.  Edit at your own risk!
// Generated by bali2jak v2002.09.03.

package mdb;
import Jakarta.util.*;

import java.io.*;
import java.util.*;

import com.sleepycat.je.Transaction;

import static mdb.Main.envmnt;
import static mdb.Main.tableCount;
import static mdb.Main.txn;
import static mdb.Main.catalog;
import static mdb.Main.tableIndex;
import static mdb.Main.unCommittedTable;
import static mdb.Main.dbName;
import static mdb.Main.unCommittedIndex;
import static mdb.Main.isOpen;



public class AbortCmd extends Abort {

    final public static int ARG_LENGTH = 1 /* Kludge! */ ;
    final public static int TOK_LENGTH = 2 ;
    
    public void execute () {
    	if(isOpen==1){
    		execute2();
    	}
    	else{
    		System.out.println("Please open a database first!");
    	}
    }

    public void execute2 () {
        
        //super.execute(); 	
    	for(Transaction x : txn){
    		x.abort();
    	}
    	
    	for(int i=0; i< tableCount; ++i){
    		String tableName = catalog.TableName.get(i);
    		for(int j=0; j<catalog.ColInfo.get(tableName).size(); ++j){
    			if(catalog.isIndexed.get(tableName).get(j).equals(true)){
    				catalog.indexTxn.get(tableName).get(j).abort();
    			}
    		}
    	}
    	//why??!!!!
    	/*
    	for(int i=0; i< tableCount; ++i){
    		String tableName = catalog.TableName.get(i);
    		for(int j=0; j<catalog.ColInfo.get(tableName).size(); ++j){
    			catalog.indexTxn.get(tableName).clear();
    		}
    	}*/
    	
    	txn.clear();
    	
    	for(int i = 0; i< tableCount; ++i){
    		txn.add(i, envmnt.get(i).beginTransaction(null, null));
    		
    	}
    	
    	for(int i=0; i< tableCount; ++i){
    		String tableName = catalog.TableName.get(i);
    		for(int j=0; j<catalog.ColInfo.get(tableName).size(); ++j){
    			catalog.indexTxn.get(tableName).add(j,catalog.indexEnv.get(tableName).get(j).beginTransaction(null, null));
    		}
    	}
    	
    	
    	for(int i=0;i<unCommittedTable.size();++i){
    		catalog.ColField.remove(unCommittedTable.get(i));
    		catalog.ColInfo.remove(unCommittedTable.get(i));
    		catalog.indexEnv.remove(unCommittedTable.get(i));
    		catalog.indexHome.remove(unCommittedTable.get(i));
    		catalog.indexStore.remove(unCommittedTable.get(i));
    		catalog.indexTxn.remove(unCommittedTable.get(i));
    		catalog.isIndexed.remove(unCommittedTable.get(i));
    		catalog.TableName.remove(unCommittedTable.get(i));
    		
    		File dir = new File("./DataBase/"+dbName+"/db/"+unCommittedTable.get(i));
    		deleteDir(dir);
    		File dir2 = new File("./DataBase/"+dbName+"/dbIndex/"+unCommittedTable.get(i));
    		deleteDir(dir2);
    		tableCount--;
    	}
    	
    	
    	for(int i=0;i<unCommittedIndex.size()-1;i=i+2){
    		String tableName = unCommittedIndex.get(i);
    		String colName = unCommittedIndex.get(i+1);
    		
    		if(catalog.ColInfo.get(tableName)!=null){
    		int index = catalog.ColInfo.get(tableName).indexOf(colName);
    		catalog.isIndexed.get(tableName).set(index, false);
    		}
    	}
    	unCommittedTable.clear();
    	unCommittedIndex.clear();
    	
    }
    	
    public static void deleteDir(File dir) { 
    	   if (dir == null || !dir.exists() || !dir.isDirectory()) 
    	       return; 
    	   for (File file : dir.listFiles()) { 
    	       if (file.isFile()) 
    	           file.delete(); 
    	       else if (file.isDirectory()) 
    	           deleteDir(file); 
    	    } 
    	    dir.delete(); 
    }

    public AstToken getABORT () {
        
        return (AstToken) tok [0] ;
    }

    public AstToken getSEMI () {
        
        return (AstToken) tok [1] ;
    }

    public boolean[] printorder () {
        
        return new boolean[] {true, true} ;
    }

    public AbortCmd setParms (AstToken tok0, AstToken tok1) {
        
        arg = new AstNode [ARG_LENGTH] ;
        tok = new AstTokenInterface [TOK_LENGTH] ;
        
        tok [0] = tok0 ;            /* ABORT */
        tok [1] = tok1 ;            /* SEMI */
        
        InitChildren () ;
        return (AbortCmd) this ;
    }

}
